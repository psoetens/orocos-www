<?php
  // $Id: user_mailman_register.module,v 1.20.2.7 2008/02/20 22:53:41 samuelet Exp $
  /**
   * Implementation of hook_help().
   */
function user_mailman_register_help($section='') {
  $output = '';
  switch ($section) {
  case 'admin/help#user_mailman_register':
    $output = '<p>'. t('This is a module for mailman subscribing which extends the <a href="@mmanager">Mailman Manager</a> module features.', array('@mmanager' => url('admin/help/mailman_manager'))) .'</p>';
    $output .= '<p>'. t('The main feature is that, instead of sending user commands in mail format as Mailman Manager does, it sends url requests to the mailman web interface where admins manage lists members.') .'</p>';
    $output .= '<p>'. t('With access permissions you\'ll be able to choose the subscription method (Mailman Manager mail, User Mailman Register http or even both) for a user of your site, and in any moment you can switch between the two methods preserving users subscription status.') .'</p>';
  }
  return $output;
  }

  /**
   * Implementation of hook_user().
   */
function user_mailman_register_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    //Create menu option on user tab;
  case 'categories':
    if (variable_get('user_mailman_register_ownform', 1)) {
      $lists = _mailman_manager_get_lists();
      if (count($lists) && user_access('access user_mailman_register')) {
        $output_user[] = array('name' => 'user_mailman_register', 'title' => t('Mailing Lists register'), 'weight' => 9);
      }
      return $output_user;
    }
    break;
  case 'form':
    if ($category == (variable_get('user_mailman_register_ownform', 1)?'user_mailman_register':'account') && user_access('access user_mailman_register')) {
      return _user_mailman_register_form($account);
    }
    break;
  case 'insert':
    if (variable_get('user_mailman_register_registerform', 1)) {
      _user_mailman_register_subscribe($account, $edit);
    }
    break;    
  case 'delete':
    _user_mailman_register_subscribe($account, $edit, 1);
    db_query("DELETE FROM {mailman_users} WHERE uid = %d", $account->uid);
    break;
  case 'validate':
    $nosub = variable_get('user_mailman_register_required', 0);
    $lists = _mailman_manager_get_lists();
    if (count($lists) > 0) {
      foreach ($lists as $list) {
        if (_user_mailman_register_list_allowed($list) && $edit['options'. trim($list['lid'])] != '0') $nosub=0;
      }
      if ($nosub && $account->uid <> 1) {
        form_set_error('user_mailman_register', t('At least one mailing list subscription is required'));
      }
    }
    break;
  case 'register':
    if (variable_get('user_mailman_register_registerform', 1)) {
      return _user_mailman_register_form();
    }
    break;
  case 'update':
    if ($category==(variable_get('user_mailman_register_ownform', 1)?'user_mailman_register':'account')) {
      _user_mailman_register_subscribe($account, $edit);
    } 
    if ($category=='account' && isset($edit['mail']) && $account->mail != $edit['mail']) {
      $lists = _mailman_manager_get_lists();
      if (count($lists) > 0) {
        //prepare a form from old status subscriptions. 
        $cpedit = $edit;
        foreach ($lists as $list) {
          $subscript=_mailman_manager_get_subscriptions($account->uid, $list['lid']);
          //Only normal is supported in first subscription.
          if ($subscript['lstatus'] == '0') {
            $subsc = '0';
          }
          else {
            $subsc = '3';
          }
          $cpedit['options'. trim($list['lid'])] = $subsc;
        }
        //Unsubribe old email.
        _user_mailman_register_subscribe($account, $edit, 1);
        //Subscribe new mail with old staus.
        _user_mailman_register_subscribe($account, $cpedit, 0, $edit['mail']);
      }
    }
    break;
  }
  }

function _user_mailman_register_form($account=false) {
  $lists = _mailman_manager_get_lists();
  if (count($lists) > 0) {
    $status = $account;
    $form['user_mailman_register'] = array('#weight' => 0.9);
    $form['user_mailman_register']['lists'] = array(
                                                    '#type' => 'fieldset',
                                                    '#title' => t('Mailing list subscription'),
                                                    '#description' => t('Join a mailing list to receive or participate in its discussions via email.'),
                                                    '#collapsible' => FALSE 
                                                    );
    foreach ($lists as $list) {
      if (!_user_mailman_register_list_allowed($list)) {
        continue;
      }
      $lstatus = 0;
      $status = 1;
      $form['user_mailman_register']['lists']['list'. trim($list['lid'])] = array(
                                                                                 '#type' => 'fieldset',
                                                                                 '#title' => $list['name'],
                                                                                 '#description' => $list['description'],
                                                                                 '#collapsible' => TRUE
                                                                                 );
      if ($account) {
        $subscrip = _mailman_manager_get_subscriptions($account->uid, $list['lid']);
        $lstatus=$subscrip['lstatus'];
      }

      if ($lstatus == 0) {
        $title = t('Subscribe to ') . $list['name'] ."?";
        if ($list['allow_unsubscribe'])
          $options['0'] = t('No');
        $options['3'] = t('Yes');
      } 
      else {
        $title = t('Change your subscription');
        if ($list['allow_unsubscribe'])
          $options['0'] = t('Unsubscribe');
        if ($list['allow_temp_disable'])
          $options['1'] = t('No mail (temporarily disable delivery)');
        if ($list['allow_digest']) {
          $options['2'] = t('Subscribe for digest (receive emails in a bundle)');
          $options['3'] = t('Subscribe for all mail (normal delivery)');
        }
        else
          $options['3'] = t('Subscribe');
      }

      // feeds specified default value into the form on new-user registration if allowed
      if (!$account) $lstatus = ((variable_get('user_mailman_register_defaultnewreg', 0)==0 && $list['allow_unsubscribe'])?0:3);

      $form['user_mailman_register']['lists']['list'. trim($list['lid'])]['options'. trim($list['lid'])] = array(
                                                                                                                '#type' => 'radios',
                                                                                                                '#title' => $title,
                                                                                                                '#options' => $options,
                                                                                                                '#default_value' => $lstatus 
                                                                                                                );
    }
    if ($status) return $form;
  }
}

function _user_mailman_register_subscribe($account, $edit, $deluser=0, $umail=false) {
  $msg='';
  if (!$umail) {
    $umail = $account->mail;
  }
  $lists = _mailman_manager_get_lists();
  if (count($lists) > 0) {
    foreach ($lists as $list) {
      if ($deluser) {
        $reqstatus='0';
      }
      else {
        if (!isset($edit['options'. trim($list['lid'])]))
          continue;
        $reqstatus=$edit['options'. trim($list['lid'])];
      }
      $subscrip=_mailman_manager_get_subscriptions($account->uid, $list['lid']);
      $query = "SELECT * FROM {mailman_users} WHERE uid = %d AND lid = %d";
      $result = db_query($query, $account->uid, $list['lid']);
      $subscrip = db_fetch_array($result);
      if ($subscrip['lstatus'] == $reqstatus) {
        continue;
      }      
      $msg .= _user_mailman_register_subscribe_update($account, $list, $reqstatus, $subscrip['lstatus'], $umail, $edit);
    }
  }
  return $msg;
}

function _user_mailman_register_subscribe_update($account, $list, $nstatus, $ostatus, $umail, $edit) {
  $msg = '';
  $email = urlencode($umail);
  $regurl = rtrim($list['webadmin'], '/') .'/members';
  $mailname='';
  switch ($nstatus) {
    //unsubscribe
  case '0':
    $regurl .= '/remove?send_unsub_ack_to_this_batch='. $list['user_notify'];
    $regurl .= '&send_unsub_notifications_to_list_owner='. $list['user_admin_notify'];
    $regurl .= '&unsubscribees_upload='. $email;
    $msg .= t('Unsubscription to ');
    break;
  case '1':
  case '2':
  case '3':
    $type='Digest';
    $digest='&'. $email .'_digest=1';
    //mail address name
    $strprofile = variable_get('user_mailman_register_profilename', '');
    $arrprofile = explode(",", $strprofile);
    if (!empty($strprofile) && count($arrprofile) > 0 && module_exists('profile')) {
      profile_load_profile($account);
      foreach ($arrprofile as $name) {
        if ($account->$name) {
          $item = $account->$name;
        }
        else {
          $item = $edit[$name];
        }
        if ($item) {
          $mailname .= $item ." ";
        }
      }
      $mailname=rtrim($mailname);
    }
    //normal
    if ($nstatus == '3') {
      if ($ostatus == '0') {
        //new subscription
        if (!empty($mailname)) {
          $email = urlencode($mailname ." <". $umail .">");
        }
        $regurl .= '/add?subscribe_or_invite='. $list['user_invite'];
        $regurl .= '&send_welcome_msg_to_this_batch='. $list['user_notify'];
        $regurl .= '&notification_to_list_owner='. $list['user_admin_notify'];
        $regurl .= '&subscribees_upload='. $email;
        $msg .= t('Subscription to ');
      }
      else {
        //change nomail or digest to normal
        $digest = '';
        $type = 'Normal';
      }
    }
    //digest
    if ($nstatus != '3' || $type == 'Normal') {
      $regurl .= '?user='. $email;
      $regurl .= $digest;
      $regurl .= '&'. $email .'_nodupes=1';
      $regurl .= '&'. $email .'_realname='. urlencode($mailname);
      $regurl .= '&'. $email .'_plain=1';
      $regurl .= '&allmodbit_val=0&setmemberopts_btn=Submit%20Your%20Changes';
      if ($nstatus =='1') {
        $regurl .= '&'. $email .'_nomail=1';
        $msg .= t('Temporary no mails from ');
      } 
      else {      
        $msg .= t('@type subscription to ', array('@type' => $type));
      }
    }
    break;
  default:
    return drupal_set_message(t('Unknown list subscription request.'), 'error');
  }
  $regurl .= '&adminpw='. $list['webpass'];
  //Debug
  //  drupal_set_message($regurl);
  $httpreq=drupal_http_request($regurl);
  //Not so good. Data response should be checked too.
  if ($httpreq->code <> 200) {
    watchdog('user mailman register', $list['name'] .' ['. $list['lid'] .'] list: '. $httpreq->code .' Http error code.', WATCHDOG_ERROR, NULL);
    $msg = drupal_set_message(t('Sorry, %name mailing list registration is currently unavaiable. Please, try again shortly.', array('%name' => $list['name'])), 'error');
    $mailonerrors=variable_get('user_mailman_register_mailonerrors', '');
    if (!empty($mailonerrors)) {
      _user_mailman_register_mail_send($account, $list, $nstatus, $ostatus, $umail, $mailonerrors, $httpreq);
    }
  }
  else {
    $query = "UPDATE {mailman_users} SET lmail = '%s', lstatus = %d WHERE uid = %d AND lid = %d";
    if (db_query($query, $umail, $nstatus, $account->uid, $list['lid'])) {
      $msg .= t('%name list completed successfully for %email', array('%name' => $list['name'], '%email' => $mailname .'<'. $umail .'>'));
      watchdog('user mailman register', $msg, WATCHDOG_NOTICE, NULL);
      $msg = drupal_set_message($msg);
    }
    else {
      $msg .= t('%name list failed.', array('%name' => $list['name']));
      watchdog('user mailman register', $msg, WATCHDOG_ERROR, NULL);
      $msg .= drupal_set_message($msg, 'error');
    }
  }
  return $msg;
}

/**
 * Implementation of hook_menu().
 */
function user_mailman_register_menu($may_cache) {
  $items = array();

  if ($may_cache) {

    $items[] = array('path' => 'user_mailman_register',
                     'title' => t('Mailing Lists register'),
                     'callback' => 'user_mailman_register_page',
                     'access' => user_access('access user_mailman_register'),
                     'type' => MENU_NORMAL_ITEM);

    $items[] = array('path' => 'admin/settings/user_mailman_register',
                     'title' => t('Mailing Lists register'),
                     'access' => user_access('administer mailman_manager'),
                     'description' => t('Allow users to subscribe and change their subscriptions to Mailman mailing lists.'),
                     'callback' => 'user_mailman_register_admin',
                     'type' => MENU_NORMAL_ITEM);
    
    $items[] = array('path' => 'admin/settings/user_mailman_register/edit',
                     'title' => t('Edit Mailing list commands'),
                     'access' => user_access('administer mailman_manager'),
                     'description' => t('Edit Mailman mailing lists web commands.'),
                     'callback' => 'user_mailman_register_admin_edit',
                     'type' => MENU__CALLBACK);
  }
  return $items;
}


/**
 * Prepare the mailing list admin form.
 */
function user_mailman_register_admin() {
  if (!user_access('administer mailman_manager')) {
    drupal_access_denied();
    return;
  }

  $output = '';
  
  $headers = array(
                   array('data' => NULL),
                   array('data' => t('ID'), 'field' => 'lid', 'sort' => 'asc'), 
                   array('data' => t('Name'), 'field' => 'name'),
                   array('data' => t('Web administration'), 'field' => 'webadmin'),
                   array('data' => t('User invite'), 'field' => 'user_invite'),
                   array('data' => t('User notify'), 'field' => 'user_notify'),
                   array('data' => t('List admins notify'), 'field' => 'user_admin_notify'),
                   array('data' => t('Allow unsubscribe'), 'field' => 'allow_unsubscribe'),
                   array('data' => t('Allow temporary disable'), 'field' => 'allow_temp_disable'),
                   array('data' => t('Allow digest'), 'field' => 'allow_digest'),
                   array('data' => t('Description'), 'field' => 'description'),
                   );
  
    
  $query = "SELECT * from {mailman_lists}";
  $query .= tablesort_sql($headers);
  $num_per_page = 15;
  $result = pager_query($query, $num_per_page);
  $lists = array();
  while ($list = db_fetch_array($result)) {
    $cmd = 'Edit';
    if (!_user_mailman_register_list_allowed($list)) $cmd = 'Activate';
    unset($list['web']);
    unset($list['webarch']);    
    unset($list['admin']);    
    unset($list['webpass']);
    unset($list['command']);
    $list['manage'] = l(t('Manage'), 'admin/settings/mailman_manager/edit/'. $list['lid']);
    $lists[] = array_merge(array('status' => l(t('@cmd', array('@cmd' => $cmd)), 'admin/settings/user_mailman_register/edit/'. $list['lid'])), $list);
  }           

  if (count($lists) == 0 ) {
    $output .= t('There are no lists available for subscription.') ." ";
  }
  else {
    $output .= drupal_get_form('user_mailman_register_adminlist_form');
    $output .= theme('table', $headers, $lists);
    $output .= theme('pager', $num_per_page);
  }
  
  $output .= l(t('Add new mailing list'), 'admin/settings/mailman_manager/add');

  return $output;  
}

function user_mailman_register_adminlist_form() {
  $form['user_mailman_admin'] = array(
                                      '#type' => 'fieldset',
                                      '#title' => t('Settings'),
                                      '#tree' => TRUE,
                                      );

  $form['user_mailman_admin']['required'] = array(
                                                   '#type' => 'checkbox', 
                                                   '#title' => t('A subscription is required'),
                                                   '#default_value' => variable_get('user_mailman_register_required', 0),
                                                   '#description' => t('If checked, user must subscribe at least to one mailing list'),
                                                   );
  $form['user_mailman_admin']['register'] = array(
                                                   '#type' => 'checkbox', 
                                                   '#title' => t('Visible in user registration form'),
                                                   '#default_value' => variable_get('user_mailman_register_registerform', 1),
                                                   '#description' => t('If checked, mailing list subscription is displayed in the register new user form.'),
                                                   );
  $form['user_mailman_admin']['defaultnewreg'] = array(
                                                   '#type' => 'radios', 
                                                   '#title' => t('Default choice in user registration form'),
                                                   '#options' => array('0' => t('No'), '1' => t('Yes')),
                                                   '#default_value' => variable_get('user_mailman_register_defaultnewreg', 0),
                                                   '#description' => t('If the above box is checked, this will be the default choice for all mailing lists in the register new user form.'),
                                                   );
  $form['user_mailman_admin']['ownform'] = array(
                                                  '#type' => 'checkbox', 
                                                  '#title' => t('Display in own separate category'),
                                                  '#default_value' => variable_get('user_mailman_register_ownform', 1),
                                                  '#description' => t('If checked, mailing list subscription is displayed in a separate category on the user account edit form.'),
                                                  );
  if (module_exists('profile')) { 
    $form['user_mailman_admin']['profilename'] = array(
                                                        '#type' => 'textfield', 
                                                        '#title' => t('Profile module'),
                                                        '#size' => 50,
                                                        '#default_value' => variable_get('user_mailman_register_profilename', ''),
                                                        '#description' => t('Retrieve the display name of mail address from !profile-url name fields. Multiple fields have to be comma separated. Optional', array('!profile-url' => l(t('Profile'), 'admin/user/profile'))),
                                                        );
  }  
  $form['user_mailman_admin']['mailonerrors'] = array(
                                                                   '#type' => 'textfield', 
                                                                   '#title' => t('Mail on errors'),
                                                                   '#size' => 50,
                                                                   '#default_value' => variable_get('user_mailman_register_mailonerrors', ''),
                                                                   '#description' => t('If not empty, a warning mail will be sent to these addresses when a user can not modify his subscriptions because of a mailman server connection failure. Multiple emails have to be comma separated. Optional'),
                                                                   );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

function user_mailman_register_adminlist_form_submit($form_id, $form_values) {
  if (!user_access('administer mailman_manager')) {
    drupal_access_denied();
    return;
  }
  $required = $form_values['user_mailman_admin']['required'];
  $register = $form_values['user_mailman_admin']['register'];
  $defaultnewreg = $form_values['user_mailman_admin']['defaultnewreg'];
  $ownform = $form_values['user_mailman_admin']['ownform'];
  $profilename = $form_values['user_mailman_admin']['profilename'];
  $mailonerrors = $form_values['user_mailman_admin']['mailonerrors'];
  if (is_numeric($required) && is_numeric($register)) {
    variable_set('user_mailman_register_required', $required);
    variable_set('user_mailman_register_registerform', $register);
    variable_set('user_mailman_register_defaultnewreg', $defaultnewreg);
    variable_set('user_mailman_register_ownform', $ownform);
    variable_set('user_mailman_register_profilename', $profilename);
    if (isset($mailonerrors)) {
      variable_set('user_mailman_register_mailonerrors', $mailonerrors);
    }
    drupal_set_message(t('Mailing list settings updated.'));
  }
}

function user_mailman_register_admin_edit($id=FALSE) {
  if (!user_access('administer mailman_manager')) {
    drupal_access_denied();
    return;
  }
  if (!$id) {
    drupal_goto('admin/settings/user_mailman_register');
    return;
  }
  return drupal_get_form('user_mailman_register_adminedit_form', $id);
}

function user_mailman_register_adminedit_form($id) {
  $form = array();
  $list = mailman_manager_get_list($id);
  $headers = array(
                   array('data' => t('ID')),
                   array('data' => t('Name')),
                   array('data' => t('Address')),
                   array('data' => t('Status')),
                   );

  $items=array();
  $items[]=array('lid' => $list->lid,
                 'name' => $list->name,
                 'command' => $list->command,
                 'status' => (_user_mailman_register_list_allowed($list)) ? t('Enabled') : t('Disabled')
                 );
  $form['list']= array('#value' => theme('table', $headers, $items));
  $form['mailman_admin'] = array(
                                      '#type' => 'fieldset',
                                      '#title' => t('Mailman settings'),
                                      '#tree' => TRUE,
                                      );
  //Mailman list managment
  $form['mailman_admin']['webadmin'] = array(
                             '#title' => t('Admin web page'), 
                             '#default_value' => $list->webadmin,
                             '#description' => t("Mailing list administration web page. The url has to be avaiable from your drupal web server ip. ") . t("Example: ") ."http://www.mysite.com/cgi-bin/mailman/admin/mylist .",
                             '#type' => 'textfield',
                             '#required' => false
                             );
  $form['mailman_admin']['webpass'] = array(
                            '#title' => t('Admin web password'), 
                            '#default_value' => $list->webpass,
                            '#description' => t('Administrator web password for the Mailing list Administrator'),
                            '#type' => 'password_confirm',
                            '#size' => 15,
                            '#required' => false
                            );
  $form['mailman_admin']['user_invite'] = array(
                                '#title' => t('Invite users'),
                                '#default_value' => $list->user_invite,
                                '#description' => t('Subscribe new users now or invite them?'),
                                '#type' => 'checkbox',
                                );
  $form['mailman_admin']['user_notify'] = array(
                                '#title' => t('Notify users'),
                                '#default_value' => $list->user_notify,
                                '#description' => t('Send welcome messages to the new subscribee?'),
                                '#type' => 'checkbox',
                                );
  $form['mailman_admin']['user_admin_notify'] = array(
                                      '#title' => t('Notify mailman administrators'),
                                      '#default_value' => $list->user_admin_notify,
                                      '#description' => t('Send notifications of new subscription to the list owner?'),
                                      '#type' => 'checkbox',
                                      );
  //Drupal list managment
  $form['drupal_admin'] = array(
                                      '#type' => 'fieldset',
                                      '#title' => t('List interface settings'),
                                      '#tree' => TRUE,
                                      );

  $form['drupal_admin']['allow_unsubscribe'] = array(
    '#title' => t('Allow unsubscribe'),
    '#default_value' => $list->allow_unsubscribe,
    '#description' => t('Allow users to unsubscribe from the list? Unchecked is equivalent to forcing subscription to this list.'),
    '#type' => 'checkbox',
    );
  $form['drupal_admin']['allow_temp_disable'] = array(
    '#title' => t('Allow temporary disable'),
    '#default_value' => $list->allow_temp_disable,
    '#description' => t('Allow users to temporarily disable delivery?'),
    '#type' => 'checkbox',
    );
  $form['drupal_admin']['allow_digest'] = array(
    '#title' => t('Allow digest'),
    '#default_value' => $list->allow_digest,
    '#description' => t('Allow users to subscribe in digest mode?'),
    '#type' => 'checkbox',
    );
  $form['drupal_admin']['description'] = array(
    '#title' => t('Description'),
    '#default_value' => $list->description,
    '#description' => t('A brief description of this mailing list. This text will be displayed in the subscriptions page.'),
    '#type' => 'textarea',
    );

  $form['lid'] = array('#type' => 'hidden', '#value' => $id );
  $form['name'] = array('#type' => 'hidden', '#value' => $list->name );
  $form['Submit'] = array(
                           '#type' => 'submit',
                           '#value' => (t('Save')),
                           );
  $b = drupal_get_breadcrumb();
  $b[] = l(t('Mailing Lists register'), 'admin/settings/user_mailman_register', array('title' => t('Allow users to subscribe and change their subscriptions to Mailman mailing lists.')));
  drupal_set_breadcrumb($b);
  return $form;
}

function user_mailman_register_adminedit_form_validate($form_id, $form_values) {
  if (!valid_url($form_values['mailman_admin']['webadmin'], 1)) {
      form_set_error('webadmin', t('%webadmin is not a valid url', array('%webadmin' => $form_values['mailman_admin']['webadmin'])));
  }  
}

function user_mailman_register_adminedit_form_submit($form_id, $form_values) {
  if (!user_access('administer mailman_manager')) {
    drupal_access_denied();
    return;
  }
  //Update existing
  $v = array( $form_values['mailman_admin']['webadmin'],
              $form_values['mailman_admin']['user_invite'],
              $form_values['mailman_admin']['user_notify'],
              $form_values['mailman_admin']['user_admin_notify'],
              $form_values['drupal_admin']['allow_unsubscribe'],
              $form_values['drupal_admin']['allow_temp_disable'],
              $form_values['drupal_admin']['allow_digest'],
              $form_values['drupal_admin']['description'],
              $form_values['lid']
              );
  $query = "UPDATE {mailman_lists} SET ";
  if (!empty($form_values['mailman_admin']['webpass'])) {
    $query .= "webpass = '%s', ";
    array_unshift($v, $form_values['mailman_admin']['webpass']);
  }
  $query .= "webadmin = '%s', user_invite = '%s', user_notify = '%s', user_admin_notify = '%s', allow_unsubscribe = '%s', allow_temp_disable = '%s', allow_digest = '%s', description = '%s' WHERE lid = %d";
  $result = db_query($query, 
                     $v
                     );
  
  if ($result) {
    $msg = t('%form-name list settings updated', array('%form-name' => $form_values['name']));
    watchdog('user mailman register', $msg, WATCHDOG_NOTICE, NULL);
  }
  else {
    $msg = t('%form-name list settings not updated', array('%form-name' => $form_values['name']));
    watchdog('user mailman register', $msg, WATCHDOG_ERROR, NULL);
  }
  drupal_set_message($msg);
}


/**
 * Implementation of hook_perm().
 */
function user_mailman_register_perm() {
  $str_perm = array('access user_mailman_register');
  $lists = _mailman_manager_get_lists();
  if (count($lists) > 0) {
    foreach ($lists as $list) {
      $str_perm[] = "can subscribe to ". $list['name'];
    }
  }
  return $str_perm;
}

/**
 * Menu callback; Forwards request to hook_user;
 */
function user_mailman_register_page() {
  if (!user_access('access user_mailman_register')) {
    drupal_access_denied();
    return;
  }
  else {
    global $user;
    drupal_goto('user/'. $user->uid .'/edit'. (variable_get('user_mailman_register_ownform', 1)?'/user_mailman_register':''));
  }
}


/**
 * Implementation of hook_link().
 */
function user_mailman_register_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  if ($type == 'page' && user_access('access content')) {
    $links[] = l(t('User mailman register'), 'user_mailman_register', array('title' => t('Subscribe to mailing lists')));
  }

  return $links;
}

function _user_mailman_register_mail_send($account, $list, $nstatus, $ostatus, $umail, $mailonerrors, $ohttp) {   
  $subject = t('Mailman subscription error for !name', array('!name' => $account->name));
  $body = t("User !name failed to change his list subscription.\nThe following infos can help you to solve the problem.\n\nUser mail: !umail\nList name: !list\nOld subscription status: !ostatus\nRequested subscription status: !nstatus\nRequested http url: !murl\nMailman Http response code: !code", array('!name' => $account->name, '!umail' => $umail, '!list' => $list['name'], '!ostatus' => $ostatus, '!nstatus' => $nstatus, '!murl' => $ohttp->request, '!code' => $ohttp->code));
  $mail_success = drupal_mail('user_mailman_register', wordwrap($mailonerrors), $subject, $body);
  $watchdog_params = array('@name' => $account->name, '@to' => "<$mailonerrors>");
  if ($mail_success) {
    watchdog('user mailman register', t('Mailman error notification for @name at @to', $watchdog_params));
  }
  else {
    watchdog('user mailman register', t('Error mailing Mailman error notification for @name at @to', $watchdog_params, WATCHDOG_ERROR));
  }
}

function _user_mailman_register_list_allowed($list) {
  if (is_array($list)) $list = (object) $list;
  return $list->webadmin && $list->webpass && user_access("can subscribe to ". $list->name);
}
