Index: mailhandler.module
===================================================================
--- mailhandler.module	(.../orocos-1.0/www/drupal/modules/mailhandler)	(revision 6617)
+++ mailhandler.module	(.../www/orocos-1.0/www/drupal/modules/mailhandler)	(revision 29517)
@@ -190,7 +190,7 @@
   $node = new stdClass();
 
   // initialize params
-  $sep = $mailbox['sigseparator'];
+  $sep = trim($mailbox['sigseparator'], '/');
 
   // copy any name/value pairs from In-Reply-To or References e-mail headers to $node. Useful for maintaining threading info.
   if ($header->references) {
@@ -219,12 +219,34 @@
   // process the commands and the body
   $lines = explode("\n", $body);
   for ($i = 0; $i < count($lines); $i++) {
-    $line = trim($lines[$i]);
-    $words = explode(' ', $line);
+    $line = $lines[$i];
+
+    // stop when we encounter the sig. we'll discard all remaining text.
+    $start = ltrim($line, "> |"); // trim common reply markers
+    if ($sep && strstr($start, $sep) !== FALSE ) { 
+        //drupal_set_message(t('>%s<:>%ss<: strlen( strstr($start,$sep): %d1 strlen($sep): %d2', array('%s' => $start,'%ss' => strstr($start,$sep),'%d1' => strlen(strstr($start,$sep)), '%d2' => strlen($sep)) ));
+
+        // OH MY GOD... strlen( strstr('-- ','-- ') ) === 4 and strlen('-- ') === 3 !!!!
+        // possibly caused by the trailing newline (MSDOS?), we removed that above.
+        if ( strlen( strstr($start,$sep) ) - 1  == strlen($sep) ) // demand at end of $line nonetheless.
+            break;
+    }
+    /*
+    if ($sep && strpos($line, $sep) == 0 )// if at begin of line as well, clearly a sep
+        break;
+    if ($sep && (strpos($line, $sep) == (strlen($line) - strlen($sep))) ) { // Detect separator at end of a line.
+        // something was in front of sep, if it was text (alnum), it is not the sig.
+        if ( !ctype_alnum( $line[0] ) )
+            break; // probably '>','|' or other reply marker.
+    }*/
+
+    $testline = trim($line); // this line kills our patch/diff layout in posts, so store in temp var.
+
+    $words = explode(' ', $testline);
     // look for a command line. if not present, note which line number is the boundary
     if (substr($words[0], -1) == ':' && is_null($endcommands)) {
       // Looks like a name: value pair
-      $data = explode(': ', $line, 2);
+      $data = explode(': ', $testline, 2);
 
       //TODO: allow for nested arrays in commands ... Possibly trim() values after explode().
       // if needed, turn this command value into an array
@@ -243,11 +265,6 @@
       if (is_null($endcommands)) $endcommands = $i;
     }
 
-    // stop when we encounter the sig. we'll discard all remaining text.
-    $start = substr($line, 0, strlen($sep)+3);
-    if ($sep && strstr($start, $sep)) { // mail clients sometimes prefix replies with ' >'
-      break;
-    }
   }
 
   // isolate the body from the commands and the sig
@@ -459,8 +478,11 @@
 function mailhandler_cron() {
   // store the original cron user
   mailhandler_switch_user();
+  //watchdog('mailhandler', 'Fetching mailhandler messages.');
+
   $result = db_query('SELECT * FROM {mailhandler} WHERE enabled = 1 ORDER BY mail');
   while ($mailbox = db_fetch_array($result)) {
+      //watchdog('mailhandler', t('Processing: %m', array('%m' => $mailbox['mail'])));
     mailhandler_retrieve($mailbox);
   }
   // revert to the original cron user
@@ -599,7 +621,7 @@
   $form['replies'] = array('#type' => 'radios', '#title' => t('Send error replies'), '#options' => array(t('Disabled'), t('Enabled')), '#default_value' => $edit['replies'], '#description' => t('Send helpful replies to all unsuccessful e-mail submissions. Consider disabling when a listserv posts to this mailbox.'));
   $form['fromheader'] = array('#type' => 'textfield', '#title' => t('From header'), '#default_value' => $edit['fromheader'], '#description' => t('Use this e-mail header to determine the author of the resulting node. Admins usually leave this field blank (thus using the <strong>From</strong> header), but <strong>Sender</strong> is also useful when working with listservs.'));
   $form['commands'] = array('#type' => 'textarea', '#title' => t('Default commands'), '#default_value' => $edit['commands'], '#description' => t('A set of commands which are added to each message. One command per line. See %link.', array('%link' => l(t('Commands'), 'admin/help/mailhandler/#commands'))));
-  $form['sigseparator'] = array('#type' => 'textfield', '#title' => t('Signature separator'), '#default_value' => $edit['sigseparator'], '#description' => t('All text after this string will be discarded. A typical value is <strong>"-- "</strong> that is two dashes followed by a blank in an otherwise empty line. Leave blank to include signature text in nodes.'));
+  $form['sigseparator'] = array('#type' => 'textfield', '#title' => t('Signature separator'), '#default_value' => $edit['sigseparator'], '#description' => t('All text after this string will be discarded. Use a / to start and end the text. A typical value is <strong>/-- /</strong> that is two dashes followed by a blank in an otherwise empty line. Leave blank to include signature text in nodes.'));
   $form['delete_after_read'] = array('#type' => 'checkbox', '#title' => t('Delete messages after they are processed?'), '#default_value' => $edit['delete_after_read'], '#description' => t('Uncheck this box to leave read messages in the mailbox. They will not be processed again unless they become marked as unread.'));
   $form['enabled'] = array('#type' => 'radios', '#title' => t('Cron processing'), '#options' => array(t('Disabled'), t('Enabled')), '#default_value' => $edit['enabled'], '#description' => t('Select disable to temporarily stop cron processing for this mailbox.'));
 
