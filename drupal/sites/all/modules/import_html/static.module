<?php
/**
 * @file
 * Storage and retrieval of Drupal node content as plain HTML files
 *
 * Intent:
 *
 * Every time a Drupal node is saved, a corresponding file is updated. This
 * means that content can be retained even if the database is unavailable.
 *
 * When retrieval is set to aggresive or intelligent, the flat file will be read
 * back and displayed. This allows for HTML to be updated directly from outside
 * of Drupal.
 * 
 * It can be used to serve legacy content, create backups, or provide alternate
 * renderings of the pages via XSL or similar.
 * 
 * It's also handy for testing the metadata and microformat retention as pages
 * get round-tripped in and out the importer.
 *
 * @package coders
 * @author Dan Morrison http://coders.co.nz/
 * @version  $Id$
 *
 */

set_include_path( dirname(__FILE__).'/coders_php_library' . PATH_SEPARATOR . get_include_path());

/**
 * @name Debug Flag
 * Used for testing only
 * @{
 */
if(! function_exists('debug')){
  require_once 'debug.inc';
}
// debug_set_level(2);
/**
 * @}
 */

include_once 'xml-transform.inc';
include_once 'file-routines.inc';
require_once 'tidy-functions.inc';


/**
 * Refresh behaviours.
 * Access the filesystem on save, on load, or on date check
 */
define("STATIC_PASSIVE", 1);
define("STATIC_AGGRESSIVE", 2);
define("STATIC_INTELLIGENT", 4);


/**
 * Return help text describing this module
 *
 * @param $section string Context this help is being called from
 * @return string
 */
function static_help($section) {

  if(! extension_loaded( "dom" )){
    $message=t(" <em>Static serialization requires PHP DOM support (a PHP5 extension). This is currently unavailable, and static writing will not work.</em>");
  }
  $description = t("Synchonizes all nodes with filesystem files. <b>experimental</b>").$message;

  switch ($section) {
    case 'admin/modules#description' :
      return $description;
    case 'admin/modules/static' :
      return $description;
    case 'admin/settings/static' :
      return $description;
    case 'admin/help#static' :
      return $message . file_get_contents(dirname(__FILE__) . "/static_help.htm");
  }
  return false;
}

/**
 * Implementation of hook_menu().
 */
function static_menu($may_cache)
{
  if (TRUE||$may_cache)
  {
    $items[] = array(
      'path' => 'admin/import_html/static_settings',
      'title' => t('Static HTML Settings'),
      'description' => t('Configure where and how the static HTML pages are mirrored.'),
      'callback' => 'drupal_get_form',
      'weight' => 1,
      'callback arguments' => array('static_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}


/**
 * Display the options and settings.
 *
 * @return FAPI Form
 */
function static_settings() {
  $form = array(); 
  
  $form['static_file_storage_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Static file location'),
    '#default_value' =>  ensure_trailing_slash( variable_get('static_file_storage_path', 'files/static/') ),
    '#description' => t("
      Where the static files are stored.
    "),
  );
  
  $form['static_synchronization_behaviour'] = array(
    '#type' => 'select',
    '#title' => t("Synchronization Behaviour"),
    '#default_value' => variable_get('static_synchronization_behaviour', STATIC_PASSIVE),
    '#options' => array(
      STATIC_PASSIVE     =>'Write file on node save, never read' ,
      STATIC_AGGRESSIVE  =>'Read file every node access, write when updating',
      STATIC_INTELLIGENT =>'Write on save, Read only if file time has changed',
     )  ,
    '#description' => t("
      How much reading and writing goes on.
    "),
  );

  $form['static_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node Types to apply to'),
    '#default_value' => variable_get('static_node_types',array()),
    '#options' => node_get_types('names'),
    '#description' => t("
          A list of node types you want to use with this module. 
          All the selected types will be synchronized with static files.
    "),
  );

  $form['static_show_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show link to archive file on page'),
    '#default_value' => variable_get('static_show_link',FALSE),
  );

  $form['static_use_import_html_settings'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use import HTML processing'),
    '#default_value' => variable_get('static_use_import_html_settings',FALSE),
    '#description' => t("
          Static HTML is designed to read and write its own 'pure' XHTML files
          in a lowest-common-denominator, semantically tagged way. 
          What comes in is expected to be the same as what goes out.
          <br/>
          However, it can also use the import_html translation pipeline on-the-fly.
          This would be useful if uploading or editing raw HTML files behind Drupals back.
          Doing so is likely to produce imperfect XHTML, so we must run the full import_html process each time such a file is read.
          This is the same as running a full import_html process on that file, using the xsl template and all the preferences currently set
          in the import_html settings.
          <br/>
          Enabling this may cause performance to suffer a bit, but the Synchronization Behaviour setting should cache the results for us.
    "),
  );
 
 return system_settings_form($form);
 
}


function static_settings_form_validate($form_id,&$edit) {
  // Ensure file path exists and is writable.
  if (!is_dir($edit['static_file_storage_path'])) {
    mkdir($edit['static_file_storage_path'],NULL,TRUE);
  }
  if (!is_writable($edit['static_file_storage_path'])) {
    form_set_error('static_file_storage_path', "Storage path is not writable");
  }
}

function static_link($type,$node){
  if(static_node_applies($node)){
    $filepath = static_node_path($node);
    $links[] = array(
      'title'=>'archive',
      'href'=>$filepath,
    );  
  }
  return $links;
}


/**
 * Hook Implimentation
 */
function static_nodeapi(& $node, $op, $teaser, $page) {
  if(! static_node_applies($node)){return;};
  switch ($op) {
    case 'insert' :
    case 'update' :
      static_node_save($node);
      break;
    case 'load' :
      return (array)static_node_load($node);
  }
}

/**
 * Return true if the admin has selected this node as participating in this
 * functionality.
 * Choose by node-type, or by virtue of a taxonomy classification (TODO)
 */
function static_node_applies($node){
  $active_node_types = variable_get('static_node_types',array());
  if ($active_node_types[$node->type]){return TRUE;}

  return FALSE;
}

/**
 * Return the path to save a node as.
 * 
 * However - should 'this/thing' end up as 'this/thing.htm'
 * or 'this/thing/index.htm' - as would be needed sometimes? 
 * 'this/thing/' will always imply 'index.htm' is expected
 */
function static_node_path($node){
  $base = variable_get('static_file_storage_path', 'files/static/');

  $path = $node->path ? $node->path : 'node/'.$node->nid;

  if(strrpos($path,'.') > strrpos($path,'/') ){ 
    // path has no suffix
    // check if it's looking like overwriting a directory
    if(is_dir($base  . $path)){
      return $base . $path . '/' .variable_get('import_html_default_document', "index.htm");
    }
  } 
  else if(strrpos($path,'/') == strlen($path)-1){
    // ends with a slash
    return $base . $path .variable_get('import_html_default_document', "index.htm");
  }
  return  $base  . preg_replace('|\.[^\.\/]+$|','',$path) . ".htm";
}

function static_node_save(&$node){
  debug("Saving node as static HTML file ".$node->path,2);    

  $html = static_node_to_html($node);
  if(! is_string($html)){return FALSE;} // failure

  $filepath = static_node_path($node);
  debug("Saving node to file ".l($filepath,$filepath) ,2);    
  #debug_pre($html);
  
  $filedir = dirname($filepath);
  if(!$filedir){trigger_error("static.module Trying to save a node with no path, this should never happen."); return;}
 
  if(!is_dir($filedir)){ mkdirs($filedir); }
  if(!is_dir($filedir)){ trigger_error("directory '$filedir' doesn't exist and couldn't be created"); }
  $success = file_put_contents($filepath,$html);
  chmod($filepath,0775); // add group write, it's annoying otherwise
  return $success;
}


function static_node_load(&$node){
  debug("Possibly loading node from static! ".$node->path,2);    
  $behaviour = variable_get('static_synchronization_behaviour', STATIC_PASSIVE);
  if($behaviour == STATIC_PASSIVE){
    debug("Static HTML in passive mode. Not doing anything.",2);
    return;
  }
  $filepath = static_node_path($node);

  if(! is_file($filepath)){
    debug("No static backup to retrieve",2);
    return;
  }
  if(($behaviour == STATIC_INTELLIGENT) && ($node->changed >= filectime( $filepath ))){
    // no recent change
    debug("No recent change in $filepath . Node time: $node->changed >= File time: ".filectime( $filepath ) ,2);
    return;
  }

  debug("Loading node statically from ".$filepath,2);    

  if(! module_exists('import_html')){
    require_once('import_html.module');
  }   

  // We should trust these files to be pure, no more validating or translating needed
  // HOWEVER
  // If reading from a non XHTML source (like raw XML)
  // extra processing (found in import_html) could be called here.

  if(variable_get('static_use_import_html_settings',FALSE))
  {
    debug("Using import_html transformation to initialize node from raw HTML file ".$filepath,2);    
    $nodes = _import_html_process_html_page($filepath,$node->path);
    $scanned_node = array_pop($nodes);
  } 
  else
  { 
    // trust the file is nice and tidy like we left it.
    $xmldoc = parse_in_xml_file($filepath, false);
    if($xmldoc){
      $scanned_node = import_html_xhtml_to_node($xmldoc);
      #dsm($scanned_node);
    }
  }
  
  if($scanned_node){
    $field_defs = static_def();
    // merge defined fields back into node object
    // Can't just replace it, as it's modified by ref.
    
    debug("Merging values loaded from file over the existing node.",2);
    watchdog('static_html',"Updating node, Merging values loaded from recently modified file $filepath over the existing node $node->nid $node->path.",2);
    foreach($field_defs as $key => $def){
      if( ! element_child($key) ){ continue ; }

      // some of the properties need renaming back - 'identifier' in the doc is 'key' in the node
      if( isset($def['#identifier']) && isset($scanned_node->$def['#identifier'])){
        $node->$key = $scanned_node->$def['#identifier'];
        debug("Replaced value of '".$key."' with value of '".$def['#identifier']."' from file " ,2);
        continue;
      }
      // or if it's indexed by key in the source, copy straight across
      if( $def['#key'] && isset($scanned_node->$key)){
        $node->$key = $scanned_node->$key;
        debug("Replaced value of '".$key."' from file " ,2);
      }
    }
    # debug_pre($node);

  } else {
    drupal_set_message(t("Failed to parse file from $filepath. It should contain info about this node.")); 
  }
  
  return $node;
}


function static_node_to_html($node){
  //importexport api should be our friend here.
  // but I really don't understand it yet

  if(! extension_loaded( "dom" )){
    drupal_set_message("Static serialization requires PHP DOM support (a PHP5 extension)",'error');
    return;
  }

  // Construct HTML page by XML
  // Pretty tedious
  $doc = new DOMDocument('1.0','UTF-8');
  $doc->formatOutput = true;
    
  $html = $doc->createElementNS('http://www.w3.org/1999/xhtml', 'html');
  $doc->appendChild( $html );

  $head = $doc->createElement('head');
  $html->appendChild( $head );
  
  // Three-step process to ensure text in titles is escaped (no & problems)
  // CreateTextNode is safer than  # $doc->createElement('title',$node->title)
  $title = $doc->createElement('title');
  $title->appendChild($doc->createTextNode($node->title));
  $head->appendChild($title);

  $body = $doc->createElement('body');
  $html->appendChild( $body );

  $heading = $doc->createElement('h1');
  $heading->appendChild($doc->createTextNode($node->title));
  $body->appendChild($heading);

  $content_doc =  new DOMDocument();

  // Need to ensure that the text coming from Drupal is valid before serializing it.
  $tidied =  xml_tidy_fragment( '<div id="content">'.$node->body.'</div>');    
#  $tidied =  '<div id="content">'.$node->body.'</div>';    

  $content_doc->loadXML($tidied);
  if( $content_node = $content_doc->firstChild ){
    $local_node = $doc->importNode($content_node, true);
    $body->appendChild($local_node);
  }
  

  // We now have an extremely valid, vanilla HTML page.
  // Add more info to its header!
  
  $field_defs = static_def();
  foreach($field_defs as $key => $def){
    if($node->$key){
      if($def['#identifier']){
        $meta = $doc->createElement('meta');
        $meta->setAttribute('name',$def['#identifier']);
        $meta->setAttribute('content',$node->$key);
        $head->appendChild($meta);
      }
    } 
  }


  $result = $doc->saveXML();
  // note, this is  pure XHTML, with the singleton <meta /> tags, not html with the open ones. 

  // this is due to conflict with Drupal newline filter
  // $result = xml_tidy_brs($result);

  return $result;
}

/**
 * Implementation of hook_def().
 * Try and do what importapi is doing.
 * This is a mapping definition to translate node properties to property labels.
 * '#alt_key_for'  is the drupal object key, (the definition key goes missing
 * when using get_element_children).
 * Defs that have an 'identifier' get treated as meta-info
 * Defs that are 'key' get copied 1:1
 */
function static_def() {
  $def = array(
    '#type' => 'entity',
    '#title' => t('Drupal node'),
  );

  $def['body'] = array(
    '#title' => t('Node Body'),
    '#key' => TRUE
  );
  $def['title'] = array(
    '#title' => t('Node Title'),
    '#key' => TRUE
  );
  $def['nid'] = array(
    '#type' => 'int',
    '#title' => t('Node ID'),
    '#identifier' => 'drupal:nid',
  );
  $def['path'] = array(
    '#title' => t('Path'),
    '#identifier' => 'drupal:path',
  );
  $def['type'] = array(
    '#title' => t('Drupal Node Type'),
    '#identifier' => 'drupal:type',
  );

  $def['created'] = array(
    '#type' => 'int',
    '#title' => t('Date Created'),
    '#identifier' => 'dc:created',
  );
  $def['changed'] = array(
    '#type' => 'int',
    '#title' => t('Date Modified'),
    '#identifier' => 'dc:modified',
  );

  $def['taxonomy'] = array(
    '#title' => t('Tag'),
    '#key' => TRUE
  );

  return $def;
}

/**
 * Implementation of hook_install().
 */
function static_install() {
  // ensure this always runs AFTER core stuff has done its nodeapi;
  // path_nodeapi('load') for example needs to have run before we call load
  db_query("UPDATE {system} SET weight = 3 WHERE name = 'static'");
  
  
}
