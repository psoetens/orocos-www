<?php
  // $Id: mailman_manager.module,v 1.32.2.1 2008/02/21 21:20:12 samuelet Exp $
  /**
   * @file
   * Allows users to subscribe to Mailman mailing lists via a form in
   * their user profile.  List of mailing lists is defined by administrator.
   * Module maintains a list of user subscriptions and passwords.
   * Module sends requests for subscription changes to Mailman request address.
   */

  /**
   * Implementation of hook_help().
   */
function mailman_manager_help($section) {
  switch ($section) {
  case 'admin/modules#description':
    return t('Utilities related to Mailman manager, subscription system and database for Mailman mailing lists.');
    break;
  case 'admin/help#mailman_manager':
      
    $output = '<p>'. t('Utilities related to Mailman manager, subscription system and database for Mailman mailing lists.') .'</p>';
    $output .= '<p>'. t("This tool works using the mailman email interface. All commands sent by this module are also BCC'ed to the list admin. One can optionally specify the web interface and/or the web archive of each list. The module can not know if a user is previously subscribed but allows the user to specify a password which can then be used to hook into an existing account.") .'</p>';
      
    return $output;
    break;
  }
  }

/**
 * Implementation of hook_link().
 */
function mailman_manager_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  if ($type == 'page' && user_access('access content')) {
    //    $links[] = l(t('mailing %list', array('%list' => format_plural(_mailman_manager_get_count(), 'list', 'lists'))), 'mailman_manager', array('title' => t('Subscribe to mailing %list', array('%list' => format_plural(_mailman_manager_get_count(), 'list', 'lists')))));
    $links[] = l(t('Mailing Lists'), 'mailman_manager', array('title' => t('Subscribe to mailing lists')));
  }

  return $links;
}

/**
 * Implementation of hook_perm().
 */
function mailman_manager_perm() {
  return array('access mailman_manager', 'administer mailman_manager');
}

/**
 * Implementation of hook_menu().
 */
function mailman_manager_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'mailman_manager',
                     'title' => t('Mailing Lists'),
                     'callback' => 'mailman_manager_page',
                     'access' => user_access('access mailman_manager'),
                     'type' => MENU_NORMAL_ITEM);
    
    $items[] = array('path' => 'admin/settings/mailman_manager',
                     'title' => t('Mailing Lists'),
                     'access' => user_access('administer mailman_manager'),
                     'description' => t('Allow users to subscribe and change their subscriptions to Mailman mailing lists.'),
                     'callback' => 'mailman_manager_admin',
                     'type' => MENU_NORMAL_ITEM);
    
    $items[] = array('path' => 'admin/settings/mailman_manager/add',
                     'title' => t('Add New'),
                     'access' => user_access('administer mailman_manager'),
                     'description' => t('Add new Mailman mailing lists.'),
                     'callback' => 'mailman_manager_admin_add',
                     'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'admin/settings/mailman_manager/edit',
                     'title' => t('Edit Mailing list'),
                     'access' => user_access('administer mailman_manager'),
                     'description' => t('Add new Mailman mailing lists.'),
                     'callback' => 'mailman_manager_admin_edit',
                     'type' => MENU__CALLBACK);
    
    $items[] = array('path' => 'admin/settings/mailman_manager/delete',
                     'title' => t('Delete Mailing list'),
                     'access' => user_access('administer mailman_manager'),
                     'description' => t('Add new Mailman mailing lists.'),
                     'callback' => 'mailman_manager_admin_delete',
                     'type' => MENU_CALLBACK);
  }
  else {
    //register a menu item for each list
    foreach (_mailman_manager_get_lists() as $list) {
      $items[] = array('path' => 'mailman_manager',
                       'title' => t($list['name']),
                       'callback' => 'mailman_manager_page',
                       'access' => user_access('access mailman_manager'),
                       'type' => MENU_NORMAL_ITEM);
    }
    
  }
  return $items;
}

/**
 * Menu callback; Forwards request to hook_user;
 */
function mailman_manager_page() {
  if (!user_access('access mailman_manager')) {
    return t('You must be an authorized member to subscribe to mailing lists');
  }
  else {
    global $user;
    drupal_goto('user/'. $user->uid .'/edit/mailman_manager');
  }
}

function _mailman_manager_user_form(&$account) {
  $form = array();
  $output = '<div class="mailman_manager">';
  $output .= '<p>'. t('The following email address will be subscribed to the email lists:') .'<br /><strong>'. $account->mail .'</strong></p>';

  $output .= '<p>'. t('If you would like to have a different email address subscribed, change your email address in the account settings tab.') .'</p>';
  $lists = _mailman_manager_get_lists();

  $form['mman'] = array('#type' => 'markup', '#value' => $output);
  if (count($lists) == 0) {
    $output = t('There are no lists available for subscription.');
  }
  else {
    $status = 0;
    foreach ($lists as $list) {
      $form['mman']['list'. trim($list['lid'])] = array(
                                                        '#type' => 'fieldset',
                                                        '#title' => t($list['name']),
                                                        '#collapsible' => TRUE
                                                        );

      $subscrip = _mailman_manager_get_subscriptions($account->uid, $list['lid']);
      if ($subscrip['lstatus'] == 0) {
        $options = array('2' => t('Subscribe for digest (receive emails in a bundle)'),
                         '3' => t('Subscribe for all Mail (normal delivery)'));
        $status++;
      }
      else {
        $options = array('0' => t('Unsubscribe'),
                         '1' => t('No mail (temporarily disable delivery)'),
                         '2' => t('Subscribe for digest (receive emails in a bundle)'),
                         '3' => t('Subscribe for all Mail (normal delivery)'),
                         '4' => t('Mail password'));
      }
      $subscrip = _mailman_manager_get_subscriptions($account->uid, $list['lid']);
      $form['mman']['list'. trim($list['lid'])]['options'. trim($list['lid'])] = array(
                                                                                       '#type' => 'radios',
                                                                                       '#title' => t('Change your subscription:'),
                                                                                       '#options' => $options,
                                                                                       '#default_value' => $subscrip['lstatus']
                                                                                       );
      if ($subscrip['lstatus'] == 0) {
        $form['mman']['list'. trim($list['lid'])]['pass'. trim($list['lid'])] = array('#type' => 'textfield',
                                                                                      '#title' => t('Password for %listname (optional)', array('%listname' => $list['name'])),
                                                                                      '#size' => 15,
                                                                                      '#required' => FALSE,
                                                                                      '#default_value' => t($subscrip['lpass'])
                                                                                      );
      }
      if ($list['web'] || $list['webarch']) {
        $link_output = '<p>'. t('Visit') .': ';
        if ($list['web']) {
          $link_output .= l(t('Mailman Interface'), $list['web']);
        }
        if ($list['web'] && $list['webarch']) {
          $link_output .= ' '. t('or') .': ';
        }
        if ($list['webarch']) {
          $link_output .= l($list['name'] .' '. t('archive') .'.', $list['webarch']);
        }
        $form['mman']['list'. trim($list['lid'])]['links'] = array('#type' => 'markup', '#value' => $link_output);
      }
    }
  }
  if ($status != 0) {
    $output2 = '<p>'. t('Your current email address is not subscribed to %status list(s).', array('%status' => $status)) .'</p>';
  }
  else {
    $output2 = '<p>'. t('Your current email address is currently subscribed to all lists.') .'</p>';
  }
  $output2 .= '</div>';
  $form['lists']['subinfo'] = array(
                                    '#type' => 'markup', 
                                    '#value' => $output2
                                    );
  $form['lists']['oldemail'] = array(
                                     '#type' => 'hidden',
                                     '#default_value' => $subscrip['lmail']
                                     );
  $form['lists']['newemail'] = array(
                                     '#type' => 'hidden',
                                     '#default_value' => $account->mail
                                     );
  return $form;

}

/**
 * Implementation of hook_user()
 * Checks whether an email address is subscribed to the mailinglist
 * when a new user signs up. If so, changes uid from 0 to the new uid
 * in sn_subscriptions so that the user's subscription status is known
 * when he logs in.
 */
function mailman_manager_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    //Create menu option on user tab;
  case 'categories':
    $lists = _mailman_manager_get_lists();
    if (count($lists) && user_access('access mailman_manager')) {
      $output_user[] = array('name' => 'mailman_manager', 'title' => t('Mailing Lists'), 'weight' => 9);
    }
    return $output_user;
    break;

    //List mailing lists with user subscriptions and options;
  case 'form':
    if ($category == 'mailman_manager' && user_access('access mailman_manager')) {      
      return _mailman_manager_user_form($account) ; 
    }
    break;
    //Update and process list subscriptions;
  case 'update':
    if ($category == 'mailman_manager') {
      $lists = _mailman_manager_get_lists();
      foreach ($lists as $list) {
        $subscrip = _mailman_manager_get_subscriptions($account->uid, $list['lid']);
        $listno = 'options'. trim($list['lid']);
        $query = "SELECT * FROM {mailman_users} WHERE uid = %d AND lid = %d";
        $result = db_query($query, $account->uid, $list['lid']);
        $subscrip = db_fetch_array($result);
        if ($edit['pass'. trim($list['lid'])] == '') {
          $password = $subscrip['lpass'];
        } 
        else {
          $password = $edit['pass'. trim($list['lid'])];
        }
        $edit['pass'. trim($list['lid'])] = ''; // See http://api.drupal.org/api/4.7/function/hook_user
        if ($subscrip['lstatus'] != $edit[$listno]) {
          _mailman_manager_update_subscriptions($account->uid, $list['lid'], $edit[$listno],
                                                $subscrip['lstatus'], $account->mail, $password);   
        }
      }
      return t('Your mailing list subscriptions have been updated');  
    }
  }
}

/**
 * Menu callback; displays the mailing list overview/editing page.
 */
function mailman_manager_admin() {
  if (!user_access('administer mailman_manager')) {
    return '';
  }
  return _mailman_manager_admin_display();
}

function mailman_manager_admin_edit($id) {
  if (!user_access('administer mailman_manager')) {
    return '';
  }
  return  drupal_get_form('mailman_manager_admin_form', $id);
}
  
function mailman_manager_admin_delete($id) {
  if (!user_access('administer mailman_manager')) {
    return '';
  }
  return drupal_get_form('mailman_manager_admin_delete_form', $id);
}

function mailman_manager_admin_delete_form($id) {
  $form = array();
  $list = mailman_manager_get_list($id);
  $form['lid'] = array(
                       '#type' => 'hidden', 
                       '#value' => $id
                       );
  $form['message'] = array('#type' => 'markup', '#value' => t('Are you sure?'));
  $form['submit'] = array(
                          '#type' => 'submit',
                          '#value' => t('Delete !listname', array('!listname' => $list->name))
                          );
  return $form;
}

function mailman_manager_admin_delete_form_submit($form_id, $form_values) {
  if (!user_access('administer mailman_manager')) {
    return '';
  }
  $result = db_query("DELETE FROM {mailman_users} WHERE lid = %d", $form_values['lid']);
  
  if ($result && db_query("DELETE FROM {mailman_lists} WHERE lid = %d", $form_values['lid'])) {
    $message = t('Successfully deleted Mailman list %listid', array('%listid' => $list['lid']));
    watchdog('mailman man', $message, 'WATCHDOG_ERROR', NULL);
    drupal_goto('admin/settings/mailman_manager');
  }  
  else {
    drupal_set_message('Error deleting Mailing list', 'error');
  }
}

function mailman_manager_admin_add() {
  if (!user_access('administer mailman_manager')) {
    return '';
  }
  return drupal_get_form('mailman_manager_admin_form');
}

function mailman_manager_get_list($id) {
  return db_fetch_object(db_query("SELECT * FROM {mailman_lists} WHERE lid = %d", $id));
}


function mailman_manager_admin_form($id = false) {
  $form = array();
  if ($id) {
    $list = mailman_manager_get_list($id);
    $form['lid'] = array(
                         '#type' => 'hidden',
                         '#value' => $id
                         );
  }
  

  $form['name'] = array(
                        '#title' => 'Mailing List name',
                        '#default_value' => t($list->name),
                        '#type' => 'textfield',
                        '#required' => true,
                        );
  $form['reqaddress'] = array(
                              '#title' => t("Mailing List 'request' address"),
                              '#default_value' => t($list->command),
                              '#description' => t('Commands are sent here'),
                              '#type' => 'textfield',
                              '#required' => true
                              );
  $form['adminaddress'] = array(
                                '#title' => t("Mailing List 'admin' address"),
                                '#default_value' => t($list->admin),
                                '#description' =>  t('(Optional. admin is used for BCC)'),
                                '#type' => 'textfield',
                                );
  $form['webaddress'] = array(
                              '#title' => t('Mailing list web address for users'), 
                              '#default_value' => t($list->web),
                              '#description' => t('http://...' ) . t("Leave empty if hidden."),
                              '#type' => 'textfield',
                              );
  $form['webarchive'] = array(
                              '#title' => t('Mailing list web archive address for users'),
                              '#default_value' => t($list->webarch),
                              '#description' => t('http://.... ') .  t('Leave empty if hidden.'),
                              '#type' => 'textfield',
                              );
  
  $form['Submit'] = array(
                          '#type' => 'submit',
                          '#value' => ($id ? t('Save') : t('Add')),
                          );
  return $form;
  
}

function mailman_manager_admin_form_validate($form_id, $form_values) {
  //Check name is unique
  $result = db_query("SELECT * from {mailman_lists} WHERE name = '%s'". ($form_values['lid'] ? ' AND lid <> %d' : ''), $form_values['name'], $form_values['lid']);
  if (db_num_rows($result)) {
    form_set_error('name', 'Name already in use');
  }

  
  if ($form_values['reqaddress'] && !valid_email_address($form_values['reqaddress'])) {
    form_set_error('reqaddress', t('"%reqaddress" is not a valid email address', array('%reqaddress' => $form_values['reqaddress'])));
  }
  
  if ($form_values['adminaddress'] && !valid_email_address($form_values['adminaddress'])) {
    form_set_error('adminaddress', t('"%adminaddress" is not a valid email address', array('%adminaddress' => $form_values['adminaddress'])));
  }
  
  if ($form_values['webaddress'] && !valid_url($form_values['webaddress'])) {
    form_set_error('webaddress', t('"%webaddress" is not a valid url', array('%webaddress' => $form_values['webaddress'])));
  }
  
  if ($form_values['webarchive'] && !valid_url($form_values['webarchive'])) {
    form_set_error('webarchive', t('"%webarchive" is not a valid url', array('%webarchive' => $form_values['webarchive'])));
  }
    
}

/**
 * Save new mailing list.
 */
function mailman_manager_admin_form_submit($form_id, $form_values) {
  if (!user_access('administer mailman_manager')) {
    return '';
  }
  if ($form_values['lid']) {
    //Update existin
    $query = "UPDATE {mailman_lists} SET name = '%s', command = '%s', admin = '%s', web = '%s', webarch = '%s' WHERE lid = %d";
    $result = db_query($query, 
                       $form_values['name'], 
                       $form_values['reqaddress'], 
                       $form_values['adminaddress'], 
                       $form_values['webaddress'], 
                       $form_values['webarchive'],
                       $form_values['lid']
                       );
    if ($result) {
      drupal_goto('admin/settings/mailman_manager');
      exit;
    }
  } 
  else {
    //Create new
    $query = "INSERT INTO {mailman_lists} (name, command, admin, web, webarch) VALUES ('%s', '%s', '%s', '%s', '%s')";
    if (db_query($query, 
                 $form_values['name'], 
                 $form_values['reqaddress'], 
                 $form_values['adminaddress'], 
                 $form_values['webaddress'], 
                 $form_values['webarchive'])) {
      $message = t('New Mailman list %name successfully created', array('%name' => $name));
      watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
      drupal_goto('admin/settings/mailman_manager');
    } 
    else {
      $message = t('Error in creating new Mailman list %name', array('%name' => $name));
      watchdog('mailman man', $watchdog, 'WATCHDOG_ERROR', NULL);
      return $message;
    }  
  }
}

/**
 * Prepare the mailing list admin form.
 */
function _mailman_manager_admin_display() {
  if (!user_access('administer mailman_manager')) {
    return '';
  }
  $output = '';
  
  $headers = array(array('data' => t('ID'), 'field' => 'lid', 'sort' => 'asc'), 
                   array('data' => t('Name'), 'field' => 'name'),
                   array('data' => t('Request Address'), 'field' => 'command'),
                   );
  
    
  $query = "SELECT * from {mailman_lists}";
  $query .= tablesort_sql($headers);
  
  $num_per_page = 15;
  $result = pager_query($query, $num_per_page);
  $lists = array();
  while ($list = db_fetch_array($result)) {
    unset($list['web']);
    unset($list['webarch']);    
    unset($list['admin']);    
    $list['edit'] = l(t('Edit'), 'admin/settings/mailman_manager/edit/'. $list['lid']);
    $list['delete'] = l(t('Delete'), 'admin/settings/mailman_manager/delete/'. $list['lid']);
    $lists[] = $list;
  }           

  $output .= theme('table', $headers, $lists);
  $output .= theme('pager', $num_per_page);
  
  $output .= l(t('Add new mailing list'), 'admin/settings/mailman_manager/add');

  return $output;  
  
}

/**
 * Return array of objects of current mailing lists.
 */
function _mailman_manager_get_lists() {
  $result = db_query("SELECT * FROM {mailman_lists}");
  $lists = array();
  while ($list = db_fetch_array($result)) {
    $lists[] = $list;
  }
  return $lists;
}

/**
 * Return array of user's subscriptions to mailing lists.
 */
function _mailman_manager_get_subscriptions($uid, $lid) {
  $query = "SELECT * FROM {mailman_users} WHERE uid = %d AND lid = %d";
  $result = db_query($query, $uid, $lid);
  
  //If there are no entries for this user then set subscriptions to zero;
  //and return no mail button option for display;
  if (db_num_rows($result) == 0) {

    $query = "INSERT INTO {mailman_users} (uid, lid, lstatus) VALUES (%d, %d, %d)";
    db_query($query, $uid, $lid, 0);
    
    $subscrip = array('uid' => $uid, 'lid' => $lid, 'lstatus' => 0);
  } 
  else {
    $subscrip = db_fetch_array($result);
  }
  return $subscrip;
}

/**
 * Update user's subscriptions to mailing lists.
 */
function _mailman_manager_update_subscriptions($uid, $lid, $lstatus, $oldstatus, $mail, $password) {
  // Do not update status for 'mail password':
  
  
  if ($lstatus != 4) {
    $query = "UPDATE {mailman_users} SET lstatus = %d WHERE uid = %d AND lid = %d";
    db_query($query, $lstatus, $uid, $lid);
  }
        
        
  switch ($lstatus) {
    
    // Unsubscribe selected;
  case 0:
    $command = 'unsubscribe '. $password .' address='. $mail;
    _mailman_manager_setdelivery($uid, $lid, $mail, $command);  
    $watchdog = t('User %uid unsubscribed from list %lid', array('%lid' => $lid, '%uid' => $uid));
    watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
    break;
  
  
    // No email selected;
  case 1:
    $command = 'set authenticate '. $password .' address='. $mail ."\n";
    $command .= 'set delivery off'; 
    _mailman_manager_setdelivery($uid, $lid, $mail, $command);  
    $watchdog = t('Subscription to list %lid for user %uid changed to no mail', array('%lid' => $lid, '%uid' => $uid));
    watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
    break;

    //Digest selected;
  case 2: 
    if ($oldstatus == 0) {
      _mailman_manager_subscribe($uid, $lid, $mail, 'digest', $password);
    } 
    else {
      $command = 'set authenticate '. $password .' address='. $mail ."\n";
      $command .= "set delivery on\n"; 
      $command .= "set digest plain"; 
      _mailman_manager_setdelivery($uid, $lid, $mail, $command);  
      $watchdog = t('Subscription to list %lid for user %uid changed to digest', array('%lid' => $lid, '%uid' => $uid));
      watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
    }    
    break;     
  
    //All mail selected;
  case 3: 
    if ($oldstatus == 0) {
      _mailman_manager_subscribe($uid, $lid, $mail, 'nodigest', $password);
    } 
    else {
      $command = 'set authenticate '. $password .' address='. $mail ."\n";
      $command .= "set delivery on\n"; 
      $command .= "set digest off"; 
      _mailman_manager_setdelivery($uid, $lid, $mail, $command);
      $watchdog = t('Subscription to list %lid for user %uid changed to all mail', array('%lid' => $lid, '%uid' => $uid));
      watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
    }
    break;
  
    //mail pwd selected;
  case 4: 
    if ($oldstatus == 0) {
      return;
    } 
    else {
      $command = 'password address='. $mail ."\n";
      _mailman_manager_setdelivery($uid, $lid, $mail, $command);
      $watchdog = t('Password for list %lid for user %uid sent by mail', array('%lid' => $lid, '%uid' => $uid));
      watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
    }
    break;

  }
  return;
}

/**
 * Create a new subscription by sending request email to Mailman.
 */
function _mailman_manager_subscribe($uid, $lid, $mail, $digest, $password) {
  $query = 'SELECT * FROM {mailman_lists} WHERE lid = %d';
  $result = db_query($query, $lid);
  $list = db_fetch_array($result);
  $commandaddress = $list['command'];
  $adminaddress = $list['admin'];
  if ($password == "") {
    $password = _mailman_manager_rand_str(5);
    $password .= trim($uid) . substr($mail, 0, 1);
  }
  $command = 'subscribe '. $password .' '. $digest .' address='. trim($mail);

  // If the adminaddress was given, use BCC
  if ($adminaddress != "") {
    $headers = array('Bcc' => $adminaddress);
  } 
  else {
    $headers = array(NULL);
  }
  $mailsuccess = drupal_mail('mailman-manager', $commandaddress, '', $command, variable_get('site_mail', ini_get('sendmail_from')), $headers);
  $query = "UPDATE {mailman_users} SET lmail = '%s', lpass = '%s' WHERE uid = %d AND lid = %d";
  if (db_query($query, $mail, $password, $uid, $lid) && $mailsuccess) {
    $watchdog = t('New subscription to list %lid for user %uid completed successfully.', array('%lid' => $lid, '%uid' => $uid));
    watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
  } 
  else {
    $watchdog = t('New subscription to list %lid for user %uid failed.', array('%lid' => $lid, '%uid' => $uid));
    watchdog('mailman man', $watchdog, 'WATCHDOG_ERROR', NULL);
  }    
  return; 
}

/**
 * Update settings for a subscription by sending request email to Mailman.
 */  
function _mailman_manager_setdelivery($uid, $lid, $mail, $command) {
  $query = "SELECT * FROM {mailman_lists} WHERE lid = %d";
  $result = db_query($query, $lid);
  $list = db_fetch_array($result);
  $commandaddress = $list['command'];
  $adminaddress = $list['admin'];

  // If the adminaddress was given, use BCC
  if ($adminaddress != '') {
    $headers = array('Bcc' => $adminaddress);
  } 
  else {
    $headers = array(NULL);
  }
  $watchdog = t('Mail command sent to Mailman to: %commandaddress. Command: %command', array('%commandaddress' => $commandaddress, '%command' => $command));
  watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
  drupal_mail('mailman-manager', $commandaddress, '', $command, variable_get('site_mail', ini_get('sendmail_from')), $headers);
  return; 
}

/**
 * Generation of five character random text string for Mailman password.
 */
function _mailman_manager_rand_str($size) {
  $feed = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  for ($i = 0; $i < $size; $i++) {
    $rand_str .= substr($feed, rand(0, strlen($feed) - 1), 1);
  }
  return $rand_str;
}