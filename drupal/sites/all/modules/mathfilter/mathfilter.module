<?php

// $ID$

/**
 * Implementation of hook_help().
 */
function mathfilter_help($section) {
  if ($section == 'admin/modules#description')
    return t('Allows users to post mathematical equations between [tex] and [/tex] tags, and function graphs between [graph] and [/graph] tags.');
}

/** 
 * Implementation of hook_menu().
 */
function mathfilter_menu($may_cache) {
  $items[] = array(
    'path' => 'admin/settings/mathfilter',
    'title' => t('Mathfilter'),
    'description' => t('Set the URL to the Mimetex binary.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('mathfilter_settings_form'),
    'access' => user_access('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Settings form
 */
function mathfilter_settings_form () {
  $form = array();
  $form['mathfilter_cgi'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('mathfilter_cgi', '/cgi-bin/mimetex.cgi'),
    '#title' => t('Enter the URL of your Mimetex file including the extension'),
    '#description' => t('Entering the full URL here allows admin users to define the location of their Mimetex binary (which could be a CGI or a .exe file.  You can visit <a href="http://www.forkosh.com/mimetex.html">this website</a> to download and install the binary.)')
  );
  
  $form['mathfilter_dimension'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('mathfilter_dimension', '260'),
    '#title' => t('Dimension'),
    '#description' => t('Enter the default dimension of the graphs.  Since they are square, we only need 1 dimension'),
  );

  if (!function_exists('curl_init')) {
    $disabled = TRUE;
    drupal_set_message(t('CURL is currently disabled on your server.  Note that you must enable the CURL Php module for caching to work for this module.  Talk to your server administrator about this module.'));
  }

   $form['mathfilter_caching'] = array(
     '#type' => 'checkbox',
     '#title' => t('Cache'),
     '#default_value' => variable_get('mathfilter_caching', FALSE),
     '#description' => t('Select to save images instead of referencing mimeTex.'),
    '#disabled' => $disabled,
   );

  return system_settings_form($form);
}

/**
 * Implementation of hook_filter().
 */
function mathfilter_filter($op, $delta = 0, $format = -1, $text = '') { 
  switch ($op) { 
    case 'list': 
      return array(0 => t('Mathfilter')); 

    case 'description': 
      return t('Allows users to post mathematical equations between [tex] and [/tex] tags, and function graphs between [graph] and [/graph] tags.'); 

    case 'prepare': 
    
      // break;
    case "process": 
      // get default values
      define('MATHFILTER_PATH', drupal_get_path('module', 'mathfilter'));
      $request = $_SERVER['HTTP_HOST'];
      $mimetex_cgi_path_http = variable_get('mathfilter_cgi', '/cgi-bin/mimetex.cgi');
      $graph_path = base_path().MATHFILTER_PATH."/includes/graphframe.php?";

      // do a match for all the equations that could be present
      preg_match_all("#\[tex\](.*?)\[/tex\]#si",$text,$tex_matches);

       // Get the defined width/height.
      $graph_width  = variable_get('mathfilter_dimension', '260');
  
      // Find out if caching is enabled.
      $mathfilter_caching = variable_get('mathfilter_caching', FALSE);
      
      // We make sure here that curl_init is enabled on this server since
      // some servers are missing this function for some strange reason
      // Unfortunately this means caching won't work on some servers.
      if (!function_exists('curl_init')) {
        $mathfilter_caching = FALSE;
      }

      // loop through each equation and find a match
      for ($i=0; $i < count($tex_matches[0]); $i++) {
        $pos = strpos($text, $tex_matches[0][$i]);
        $mimetex_formula = $tex_matches[1][$i];
        $alt_mimetex_formula = htmlentities($mimetex_formula, ENT_QUOTES);
        $alt_mimetex_formula = str_replace("\r","&#13;",$alt_mimetex_formula);
        $alt_mimetex_formula = str_replace("\n","&#10;",$alt_mimetex_formula);

        if ($mathfilter_caching) {
          // We make sure that the directory exists and is writable.
          // We do this here in case something happens so we can
          // deal with it on the fly if necessary.
          $file_directory_path = file_directory_path()."/mathfilter";
          if (!file_check_directory($file_directory_path)) {
            if (!is_dir($file_directory_path)) {
              mkdir($file_directory_path);
            }
            chmod($file_directory_path, 0777);
          }
     
          // If we are going with caching, we need an /absolute/ url
          // for cURL which may have not been entered by the user.
          if (preg_match('/^http/i', $mimetex_cgi_path_http)) {
            $absolute_url = $mimetex_cgi_path_http . '?';
          } else {
            // We will respect secure transactions.
            if ($_SERVER['HTTPS']) {
              $absolute_url = 'https://';
            } else {
              $absolute_url = 'http://';
            }
            $absolute_url .= $_SERVER['HTTP_HOST'] . $mimetex_cgi_path_http . '?';
          }
     
        }
        
        if (!$mathfilter_caching) {
          $text = substr_replace($text, "<img src='".$mimetex_cgi_path_http."?" . rawurlencode($mimetex_formula) . "' title='".$alt_mimetex_formula."' alt='".$alt_mimetex_formula."' style=\"vertical-align: middle;\" >",$pos,strlen($tex_matches[0][$i]));
        } else {
          // mathfilter_caching */
          // Get the image with curl, save it using sha1
          // as the file name and reference the saved image 
          // in the img tag.  We use sha1 to prevent file
          // name collisions which is *much* better for
          // this purpose than md5 which is used by mimetex
          // if caching is enabled at compile time.
          $formula_image_file = $file_directory_path . '/' . sha1($mimetex_formula) . '.gif';
          
          if (!file_exists(file_create_url($formula_image_file))) {
            $ch = curl_init($absolute_url . rawurlencode($mimetex_formula));
            $fp = fopen($formula_image_file, 'w');
   
            curl_setopt($ch, CURLOPT_FILE, $fp);
   
            curl_exec($ch);
            curl_close($ch);
            fclose($fp);
          }
   
          $text = substr_replace($text, "<img src='" . file_create_url($formula_image_file) . "' title='" . $alt_mimetex_formula . "' alt='" . $alt_mimetex_formula . "' style=\"vertical-align: middle;\" >", $pos, strlen($tex_matches[0][$i]));
        }
      }
      
      // Find all the matches
      preg_match_all("#\[graph\](.*?)\[/graph\]#si",$text,$graph_matches);

      // Loop through each of them and replace for the iframe that contains the graph
      // This isn't very efficient, but we have as yet figured out how to modify Walter Zorn's
      // Grapher to allow for multiple graphs to be displayed on the same page.
      for ($i=0; $i < count($graph_matches[0]); $i++) {
        $pos = strpos($text, $graph_matches[0][$i]);
        $current_function = $graph_matches[1][$i];
        $function = htmlentities($current_function, ENT_QUOTES);
        $text = substr_replace($text, '<iframe frameborder="0" src="'.$graph_path.'f='.urlencode($function).'" style="display: block; width: ' . $graph_width . 'px; height: ' . $graph_width . 'px; border: 0px;" scrolling="no" ></iframe>',$pos,strlen($graph_matches[0][$i]));
      }    
    
      // Find all of the matches
      preg_match_all('#\[graph xmin="(.*?)" xmax="(.*?)" ymin="(.*?)" ymax="(.*?)"\](.*?)\[/graph\]#si',$text,$matches);
      
      // Loop through and make the replacements.
      for ($i=0; $i < count($matches[0]); $i++) {
        $pos = strpos($text, $matches[0][$i]);
        $current_function = $matches[5][$i];
        $function = htmlentities($current_function, ENT_QUOTES);
        $text = substr_replace($text, '<iframe frameborder="0" src="'.$graph_path.'f='.urlencode($function).'&xmin='.$matches[1][$i].'&xmax='.$matches[2][$i].'&ymin='.$matches[3][$i].'&ymax='.$matches[4][$i].'" style="display: block; width: ' . $graph_width . 'px; height: ' . $graph_width . 'px; border: 0px;" scrolling="no" ></iframe>', $pos, strlen($matches[0][$i]));
      }
    
      return $text;

    default: 
      return $text; 
  } 
}
