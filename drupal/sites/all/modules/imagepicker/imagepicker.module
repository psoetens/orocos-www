<?php

/**
 * @file
 * Enables permitted roles to upload images for insertion into configured nodes.
 */

define('IMAGEPICKER_FILES_DIR', 'imagepicker');
define('IMAGEPICKER_THUMBS_DIR', 'thumbs');
define('IMAGEPICKER_BROWSER_DIR', 'browser');
define('IMAGEPICKER_ORIG_DIR', 'orig');
define('IMAGEPICKER_WATERMARK_DIR', 'watermarks');
define('IMAGEPICKER_ADMIN_PATH', 'admin/settings/imagepicker');
define('IMAGEPICKER_PATH', drupal_get_path('module', 'imagepicker'));
// Minimum PHP version for extension
define('IMAGEPICKER_UPLOAD_STATUS_MIN_PHP', '5.2.1');
define('IMAGEPICKER_UPLOAD_ID', 'UPLOAD_IDENTIFIER');

/**
 * Implementation of hook_help().
 */
function imagepicker_help($path, $arg) {
  switch ($path) {
    case 'admin/help#imagepicker':
      $output = '<p>'. t('Adds an advanced image upload form under the node body part.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function imagepicker_perm() {
  return array('administer imagepicker', 'use imagepicker', 'access own imagepicker', 'use public imagepicker', 'create public groups');
}

/**
 * Implementation of hook_init().
 */
function imagepicker_init() {
  global $user;
  if ($user->uid > 0) {
    module_load_include('inc', 'imagepicker', 'imagepicker.functions');
    module_load_include('inc', 'imagepicker', 'imagepicker.theme');
    module_load_include('inc', 'imagepicker', 'imagepicker.form-elements');
  }
}

/**
 * Implementation of hook_menu().
 */
function imagepicker_menu() {

  $items = array();
  $items['imagepicker'] = array(
    'title'            => 'Image picker',
    'page callback'    => 'imagepicker_box',
    'access callback'  => 'imagepicker_access_use',
    'type'             => MENU_CALLBACK,
    'file'             => 'imagepicker.upload.inc'
  );
  $items['imagepicker/upload'] = array(
    'title'            => 'Upload',
    'access callback'  => 'imagepicker_access_use',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => 0,
  );
  $items['imagepicker/browse'] = array(
    'title'            => 'Browse',
    'page callback'    => 'imagepicker_box',
    'access callback'  => 'imagepicker_access_use',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 2,
  );
  $items['imagepicker/browse_public'] = array(
    'title'            => 'Browse Public',
    'page callback'    => 'imagepicker_box',
    'access callback'  => 'imagepicker_access_use_public',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 3
  );
  $items['imagepicker/groups'] = array(
    'title'            => 'Groups',
    'page callback'    => 'imagepicker_box',
    'access callback'  => 'imagepicker_access_use_group',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.group.inc',
    'weight'           => 4
  );
  $items['imagepicker/browse/%imagepicker_id'] = array(
    'title'            => 'Browse',
    'page callback'    => 'imagepicker_box',
    'access callback'  => 'imagepicker_access_use',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 2
  );
  $items['imagepicker/edit/%imagepicker_id'] = array(
    'title'            => 'Edit image',
    'page callback'    => 'imagepicker_box',
    'access callback'  => 'imagepicker_access_use',
    'type'             => MENU_CALLBACK,
    'file'             => 'imagepicker.edit.inc'
  );
  $items['imagepicker/image/%imagepicker_id'] = array(
    'title'            => 'Imagepicker',
    'page callback'    => 'imagepicker_box',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK
  );
  // uploadprogress callback
  $items['imagepicker/progress'] = array(
    'page callback' => 'imagepicker_uploadprogress_callback',
    'access arguments' => array(TRUE),
    'type' => MENU_CALLBACK,
  );
  // admin settings
  $items[IMAGEPICKER_ADMIN_PATH] = array(
    'title'            => 'Imagepicker',
    'description'      => 'Imagepicker settings and administration.',
    'page callback'    => 'imagepicker_settings_page',
    'access callback'  => 'imagepicker_access_admin',
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => 0
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/general'] = array(
    'title'            => 'General',
    'description'      => 'Imagepicker settings.',
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('imagepicker_settings_form'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -10
  );
  // admin groups and images
  $items[IMAGEPICKER_ADMIN_PATH .'/groups'] = array(
    'title'            => 'Groups',
    'description'      => 'Show user groups.',
    'access callback'  => 'imagepicker_access_admin_group',
    'page callback'    => 'imagepicker_admin_groups',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -8
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/groups/users'] = array(
    'title'            => 'Users',
    'description'      => 'Show user groups.',
    'access callback'  => 'imagepicker_access_admin_group',
    'page callback'    => 'imagepicker_admin_groups',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -10
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/groups/stats'] = array(
    'title'            => 'Stats',
    'description'      => 'Show user group stats.',
    'access callback'  => 'imagepicker_access_admin_group',
    'page callback'    => 'imagepicker_admin_groups',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -8
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/groups/user/%imagepicker_id'] = array(
    'title'            => 'Groups',
    'description'      => 'Show user groups.',
    'access callback'  => 'imagepicker_access_admin_group',
    'page callback'    => 'imagepicker_admin_groups',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -7
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/groups/user/%imagepicker_id/stats'] = array(
    'title'            => 'Stats',
    'description'      => 'Show user stats.',
    'access callback'  => 'imagepicker_access_admin_group',
    'page callback'    => 'imagepicker_admin_groups',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -8
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/groups/autocomplete'] = array(
    'access callback'  => 'imagepicker_access_admin_group',
    'page callback'    => 'imagepicker_group_search_autocomplete',
    'type'             => MENU_CALLBACK,
    'file'             => 'imagepicker.admin.inc'
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/stats'] = array(
    'title'            => 'Stats All',
    'description'      => 'Show user statistics.',
    'access callback'  => 'imagepicker_access_admin_group',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -7
  );
  // admin images
  $items[IMAGEPICKER_ADMIN_PATH .'/images'] = array(
    'title'            => 'Images',
    'description'      => 'Show user images.',
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -9
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/browse_all'] = array(
    'title'            => 'Browse All',
    'description'      => 'Browse user images.',
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -9
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/list_all'] = array(
    'title'            => 'List All',
    'description'      => 'List user images.',
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -8
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/users'] = array(
    'title'            => 'Users',
    'description'      => 'List users.',
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -10
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/user/%imagepicker_id/browse'] = array(
    'title'            => 'Browse',
    'description'      => 'Browse user images.',
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -4
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/user/%imagepicker_id/browseadmin'] = array(
    'title'            => 'List',
    'description'      => 'List user images.',
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -3
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/user/%imagepicker_id/upload'] = array(
    'title'            => 'Upload',
    'description'      => 'Browse user images.',
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -6
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/user/%imagepicker_id/stats'] = array(
    'title'            => 'Stats',
    'description'      => 'Browse user images.',
    'access callback'  => 'imagepicker_access_admin_group',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -2
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/user/%imagepicker_id/groups'] = array(
    'title'            => 'Groups',
    'description'      => 'List user groups.',
    'access callback'  => 'imagepicker_access_admin_group',
    'page callback'    => 'imagepicker_admin_images',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -1
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/images/autocomplete'] = array(
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'imagepicker_user_autocomplete',
    'type'             => MENU_CALLBACK,
    'file'             => 'imagepicker.admin.inc'
  );
  // admin validation
  $items[IMAGEPICKER_ADMIN_PATH .'/convert'] = array(
    'title'            => 'Validate Files',
    'description'      => 'Validate and convert Imagepicker Files.',
    'access callback'  => 'imagepicker_access_admin',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('imagepicker_convert_form'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -7
  );
  // Import
  $items[IMAGEPICKER_ADMIN_PATH .'/import'] = array(
    'title'            => 'Import',
    'description'      => 'Manage bulk imports.',
    'page callback'    => 'imagepicker_admin_import',
    'access callback'  => 'imagepicker_access_import',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -8
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/import/autocomplete'] = array(
    'access callback'  => 'imagepicker_access_import',
    'page callback'    => 'imagepicker_user_autocomplete',
    'type'             => MENU_CALLBACK,
    'file'             => 'imagepicker.admin.inc'
  );
  $items[IMAGEPICKER_ADMIN_PATH .'/import/user/%imagepicker_id'] = array(
    'title'            => 'Import',
    'description'      => 'Import files.',
    'access callback'  => 'imagepicker_access_import',
    'page callback'    => 'imagepicker_admin_import',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.admin.inc',
    'weight'           => -3
  );
  // multitask
  $items[IMAGEPICKER_ADMIN_PATH .'/multitask/%/%/%'] = array(
    'title' => 'Bulk Operations',
    'page callback' => 'imagepicker_multitask',
    'page arguments' => array(4, 5, 6),
    'access callback'  => 'imagepicker_access_admin',
    'type' => MENU_CALLBACK,
  );
  // My imagepicker
  $items['user/%imagepicker_uid/imagepicker'] = array(
    'title'            => 'My imagepicker',
    'description'      => 'Manage your imagepicker files.',
    'page callback'    => 'imagepicker_user_page',
    'page arguments'   => array(1),
    'access callback'  => 'imagepicker_access_user_pages',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.user.inc',
    'weight'           => 0
  );
  $items['user/%imagepicker_uid/imagepicker/upload'] = array(
    'title'            => 'Upload',
    'description'      => 'Upload images.',
    'page callback'    => 'imagepicker_user_page',
    'page arguments'   => array(1, 3),
    'access callback'  => 'imagepicker_access_user_pages',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.user.inc',
    'weight'           => -9
  );
  $items['user/%imagepicker_uid/imagepicker/images/browse'] = array(
    'title'            => 'Browse',
    'description'      => 'Browse your imagepicker files.',
    'page callback'    => 'imagepicker_user_page',
    'page arguments'   => array(1, 3, 4, 5),
    'access callback'  => 'imagepicker_access_user_pages',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.user.inc',
    'weight'           => -7
  );
  $items['user/%imagepicker_uid/imagepicker/images/browseadmin'] = array(
    'title'            => 'List',
    'description'      => 'List your imagepicker files.',
    'page callback'    => 'imagepicker_user_page',
    'page arguments'   => array(1, 3, 4, 5),
    'access callback'  => 'imagepicker_access_user_pages',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.user.inc',
    'weight'           => -6
  );
  // groups
  $items['user/%imagepicker_uid/imagepicker/images/browse_public'] = array(
    'title'            => 'Browse Public',
    'description'      => 'Browse public imagepicker files.',
    'page callback'    => 'imagepicker_user_page',
    'page arguments'   => array(1, 3, 4, 5),
    'access callback'  => 'imagepicker_access_user_public',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.user.inc',
    'weight'           => -5
  );
  $items['user/%imagepicker_uid/imagepicker/groups/browse'] = array(
    'title'            => 'Groups',
    'description'      => 'Manage your imagepicker groups.',
    'page callback'    => 'imagepicker_user_page',
    'page arguments'   => array(1, 3, 4, 5),
    'access callback'  => 'imagepicker_access_user_groups',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.user.inc',
    'weight'           => -4
  );
  $items['user/%imagepicker_uid/imagepicker/stats'] = array(
    'title'            => 'Stats',
    'description'      => 'View your imagepicker statistics.',
    'page callback'    => 'imagepicker_user_page',
    'page arguments'   => array(1, 3),
    'access callback'  => 'imagepicker_access_user_groups',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.user.inc',
    'weight'           => -3
  );
  $items['user/%imagepicker_uid/imagepicker/config'] = array(
    'title'            => 'Config',
    'description'      => 'Administer user configuration.',
    'page callback'    => 'imagepicker_user_page',
    'page arguments'   => array(1, 3),
    'access callback'  => 'imagepicker_access_user_config',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'imagepicker.user.inc',
    'weight'           => -2
  );
  // multitask
  $items['user/%imagepicker_uid/imagepicker/multitask/%/%/%'] = array(
    'title' => 'Bulk Operations',
    'page callback' => 'imagepicker_multitask',
    'page arguments' => array(4, 5, 6),
    'access callback'  => 'imagepicker_access_user_pages',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * menu placeholder functions
 */
function imagepicker_id_load($arg) {
  return (is_numeric($arg) ? $arg : FALSE);
}

function imagepicker_uid_load($arg) {
  global $user;
  return ((is_numeric($arg) && $user->uid == $arg) ? $arg : FALSE);
}

/**
 * Menu access callback functions.
 */
function imagepicker_access_import() {
  if (variable_get('imagepicker_import_enabled', 0) && user_access('administer imagepicker')) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_access_user_pages() {
  if (variable_get('imagepicker_account_enabled', 1) && user_access('access own imagepicker') ) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_access_user_config() {
  if (variable_get('imagepicker_account_enabled', 1)
      && user_access('access own imagepicker')
      && variable_get('imagepicker_user_config_enable', 1)
  ) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_access_user_groups() {
  if (variable_get('imagepicker_account_enabled', 1)
      && user_access('access own imagepicker')
      && variable_get('imagepicker_groups_enabled', 1)
    ) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_access_user_public() {
  if (variable_get('imagepicker_account_enabled', 1)
      && user_access('access own imagepicker')
      && variable_get('imagepicker_groups_enabled', 1)
      && user_access('use public imagepicker')
      && variable_get('imagepicker_public_enabled', 1)
    ) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_access_admin_group() {
  if (variable_get('imagepicker_groups_enabled', 1)
      && user_access('administer imagepicker')
    ) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_access_admin() {
  if (user_access('administer imagepicker')) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_access_use() {
  if (user_access('use imagepicker')) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_access_use_public() {
  if (user_access('use public imagepicker') && variable_get('imagepicker_public_enabled', 1)) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_access_use_group() {
  if (user_access('use imagepicker') && variable_get('imagepicker_groups_enabled', 1)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_block().
 */
function imagepicker_block($op = 'list', $delta = 0, $edit = array()) {

  if(variable_get('imagepicker_galleryblocks_enabled', 0) && module_exists('colorbox')) {
    $howmany = variable_get('imagepicker_galleryblocks_howmany', 1);
    switch ($op) {
      case 'list':
        for ($i = 1; $i <= $howmany; $i++) {
          if (variable_get('imagepicker_galleryblocks_enable_'. $i, 0)) {
            $blocks[$i]['info'] = t('Imagepicker Gallery block !i', array('!i' => $i));
            $blocks[$i]['cache'] = BLOCK_NO_CACHE;
          }
        }
        return $blocks;

      case 'configure':
        $form = imagepicker_block_form($delta);
        return $form;

      case 'save':
        imagepicker_block_form_submit($delta, $edit);
        return;

      case 'view':
        $block = array(
          'subject' => variable_get('imagepicker_galleryblocks_title_'. $delta, t('Gallery !i', array('!i' => $delta))),
          'content' => imagepicker_display_block($delta),
        );
        return $block;

      case 'cache':
        return BLOCK_NO_CACHE;
    }
  }
}

/**
 * Function to display the contents of a block.
 */
function imagepicker_display_block($i) {
  // fetch all the images for the group
  $boxtype = 'colorbox';
  $gid = variable_get('imagepicker_galleryblocks_group_' . $i, '');
  $clickon = variable_get('imagepicker_galleryblocks_link_'. $i, t('Photo Gallery !i', array('!i' => $i)));
  $textarea = variable_get('imagepicker_galleryblocks_text_'. $i, '');
  $group = imagepicker_get_user_group($gid);
  $gal = $group->group_name;
  $fpath .= file_directory_path() . DIRECTORY_SEPARATOR . IMAGEPICKER_FILES_DIR . DIRECTORY_SEPARATOR;
  $sql = "SELECT DISTINCT i.img_id, i.uid, i.img_name, i.img_title, img_description
  FROM {imagepicker} AS i JOIN {users} AS n USING (uid),
  {imagepicker_user_groups} AS u JOIN {imagepicker_group_images} AS g USING (gid)
  WHERE g.img_id=i.img_id AND u.group_name = '$gal'";
  $result = db_query($sql);
  $ct = 0;
  $content = "";
  $class = '';
  while ($img = db_fetch_object($result)) {
    $name = $img->img_name;
    $t = $img->img_title;
    $d = $img->img_description;
    $title = ($d ? $d : $t);
    $full = $fpath . $img->uid . DIRECTORY_SEPARATOR . $name;
    if ($ct) {
      $class = "js-hide";
      $content .= l($name, $full, array('html' => ($ct ? FALSE : TRUE), 'attributes' => array('class' => "$boxtype $class", 'rel' => $gal, 'title' => $title)));
    }
    else {
      // first one is visible
      $link =  l($clickon, $full, array('html' => ($ct ? FALSE : TRUE), 'attributes' => array('class' => "$boxtype $class", 'rel' => $gal, 'title' => $title)));
      if ($textarea && preg_match("/\[link\]/", $textarea)) {
        $content .= preg_replace("/\[link\]/", $link, $textarea);
      }
      else {
        $content .= $textarea . $link;
      }
    }

    $ct++;
  }
  return $content;

}

// the block form
function imagepicker_block_form($i) {
  $groups = imagepicker_get_all_groups();
  $form['imagepicker_galleryblocks_link_'. $i] = array(
    '#type' => 'textfield',
    '#title' => t('Link text for Gallery Block !i', array('!i' => $i)),
    '#default_value' => variable_get('imagepicker_galleryblocks_link_'. $i, t('Photo Gallery !i', array('!i' => $i))),
    '#required' => TRUE,
    '#description' => t('Set the link text for this block. Can contain html.'),
  );
  $form['imagepicker_galleryblocks_group_'. $i] = array(
    '#type' => 'select',
    '#title' => t('Select a group for this block'),
    '#default_value' => variable_get('imagepicker_galleryblocks_group_' . $i, ''),
    '#options' => $groups,
  );
  $form['imagepicker_galleryblocks_text_'. $i] = array(
    '#type' => 'textarea',
    '#title' => t('Block text'),
    '#default_value' => variable_get('imagepicker_galleryblocks_text_'. $i, ''),
    '#required' => FALSE,
    '#description' => t("You can add some text to the block. To include the link in the text use the token '[link]' "),

  );
  $form['imagepicker_galleryblocks_enable_'. $i] = array(
    '#type' => 'value',
    '#value' => 1,
  );
  $form['imagepicker_galleryblocks_grouptot'] =  array(
    '#type' => 'value',
    '#value' => count($groups),
  );
  return $form;
}

function imagepicker_block_form_submit($i, $edit) {

  // clean out any existing ones
  variable_del('imagepicker_galleryblocks_link_'. $i);
  variable_del('imagepicker_galleryblocks_text_'. $i);
  variable_del('imagepicker_galleryblocks_group_'. $i);
  variable_del('imagepicker_galleryblocks_enable_'. $i);
  if ($edit['imagepicker_galleryblocks_enable_'. $i] && ! empty($edit['imagepicker_galleryblocks_link_'. $i]) && $edit['imagepicker_galleryblocks_grouptot']) {
    variable_set('imagepicker_galleryblocks_link_'. $i, $edit['imagepicker_galleryblocks_link_'. $i]);
    variable_set('imagepicker_galleryblocks_text_'. $i, check_markup($edit['imagepicker_galleryblocks_text_'. $i]));
    variable_set('imagepicker_galleryblocks_group_'. $i, $edit['imagepicker_galleryblocks_group_'. $i]);
    variable_set('imagepicker_galleryblocks_enable_'. $i, $edit['imagepicker_galleryblocks_enable_'. $i]);
  }
}


/**
 * Implementation of hook_form_alter().
 */
function imagepicker_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  $node_type = FALSE;
  $comment = FALSE;
  $block = FALSE;
  $weight = 1;
  if (isset($form['#node'])) {
    $node = $form['#node'];
    $node_types = node_get_types('names');
    $node_type = in_array($node->type, variable_get('imagepicker_node_types_enabled', array_keys($node_types)), TRUE);
  }
  elseif (module_exists('comment') && variable_get('imagepicker_comment_enabled', 0) && preg_match('/comment_form$/i', $form_id) ) {
    $comment = TRUE;
    $weight = 1;
  }
  // blocks
  elseif (( $form_id == 'block_add_block_form' || $form_id == 'block_admin_configure' ) && variable_get('imagepicker_blocks_enabled', 0)) {
    $block = TRUE;
    $weight = 1;
  }
  if (user_access('use imagepicker')) {
    $width = variable_get('imagepicker_advanced_iframe_width', "100%");
    if ( isset($user->imagepicker_advanced_iframe_width) && $user->imagepicker_advanced_iframe_width ) {
      $width = $user->imagepicker_advanced_iframe_width;
    }
    if (! preg_match("/%$/", $width)) {
      $width .= 'px';
    }
    $height = variable_get('imagepicker_advanced_iframe_height', 500);
    if (isset($user->imagepicker_advanced_iframe_height) && $user->imagepicker_advanced_iframe_height ) {
      $height = $user->imagepicker_advanced_iframe_height;
    }
    $border = variable_get('imagepicker_advanced_iframe_border', "0");
    if (isset($user->imagepicker_advanced_iframe_border)) {
      $border = $user->imagepicker_advanced_iframe_border;
    }

    if (imagepicker_get_thickbox_perms()) {
      $iurl = l(t('Run imagepicker'), 'imagepicker' );
    }
    elseif (imagepicker_get_colorbox_perms()) {
      $iurl = l(t('Run imagepicker'), 'imagepicker', array(
        'query' => array('width' => $width, 'height' => $height, 'iframe' => 'true'),
        'attributes' => array('class' => 'colorbox-load')
      ));
    }
    else {
      $iurl = '<iframe id="imagepicker" style="width: '. $width .'; height: '. $height .'px; border: '. $border .';" src="'. url('imagepicker') .'">Imagepicker requires iframe support.</iframe>';
    }

    if (($node_type && preg_match('/node_form$/i', $form_id) ) || $comment ) {
      $form['body_field']['body_filter']['imagepicker_file_upload'] = array(
        '#type' => 'fieldset',
        '#title' => t('Image picker'),
        '#collapsible' => 1,
        '#collapsed' => variable_get('imagepicker_advanced_collapsed', 0),
        '#weight' => $weight,
      );

      $form['body_field']['body_filter']['#weight'] = 2;
      $form['body_field']['body_filter']['imagepicker_file_upload']['mpframe'] = array(
        '#type' => 'markup',
        '#value' => '<div id="imgp_tb">'. $iurl .'</div>',
      );
      $form['body_field']['#prefix'] = '<a name="body_hash"></a>'. $form['body_field']['#prefix'];
    }
    elseif ($block) {
      $form['block_settings']['imagepicker_file_upload'] = array(
        '#type' => 'fieldset',
        '#title' => t('Image picker'),
        '#collapsible' => TRUE,
        '#collapsed' => (isset($user->imagepicker_advanced_collapsed) ? $user->imagepicker_advanced_collapsed : variable_get('imagepicker_advanced_collapsed', 0)),
        '#weight' => $weight,
      );
      $form['block_settings']['imagepicker_file_upload']['mpframe'] = array(
        '#type' => 'markup',
        '#value' => '<div id="imgp_tb">'. $iurl .'</div>',
      );
      $form['block_settings']['#prefix'] = '<a name="body_hash"></a>'. $form['block_settings']['#prefix'];
    }
  }
}


function imagepicker_get_thickbox_perms() {
  global $user;
  if ((module_exists('thickbox')
    && isset($user->imagepicker_advanced_thickbox)
    && $user->imagepicker_advanced_thickbox
    && variable_get('imagepicker_advanced_thickbox', 0 ))
      || (module_exists('thickbox')
    && ! isset($user->imagepicker_advanced_thickbox)
    && variable_get('imagepicker_advanced_thickbox', 0))) {
    return TRUE;
  }
  return FALSE;
}

function imagepicker_get_colorbox_perms() {
  global $user;
  if ((module_exists('colorbox')
    && isset($user->imagepicker_advanced_colorbox)
    && $user->imagepicker_advanced_colorbox
    && variable_get('imagepicker_advanced_colorbox', 0 )
    && variable_get('colorbox_load', 0))
      || (module_exists('colorbox')
    && ! isset($user->imagepicker_advanced_colorbox)
    && variable_get('imagepicker_advanced_colorbox', 0)
    && variable_get('colorbox_load', 0))
    ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * get all for a group
 */
function imagepicker_get_user_group($gid, $obj=TRUE) {
  $result = db_query("SELECT * FROM {imagepicker_user_groups} WHERE gid = %d", array($gid));
  if ($obj) {
    return db_fetch_object($result);
  }
  return db_fetch_array($result);
}

// for blocks
function imagepicker_get_all_groups($override = NULL) {
  $public = FALSE;
   if ($override == NULL) {
    $public = variable_get('imagepicker_galleryblocks_public', 0);
   }
   else {
    $public = $override;
   }
  $data = FALSE;
  $sql = "SELECT gid, group_name FROM {imagepicker_user_groups}";
  if ($public) {
    $sql .= " WHERE public=1";
  }
  $result = db_query($sql);
  while ($row = db_fetch_array($result)) {
    $result2 = db_query("SELECT count(DISTINCT gi.img_id) AS ct FROM {imagepicker_group_images} gi, {imagepicker_user_groups} g WHERE g.gid = gi.gid AND g.gid = %d", array($row['gid']));
    $row2 = db_fetch_array($result2);
    $totcount = $row2['ct'];
    $data[$row['gid']] = $row['group_name'] .' - '. format_plural($totcount, '1 image', '@count images');
  }
  return $data;
}
